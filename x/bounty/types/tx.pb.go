// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/bounty/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateProgram defines a SDK message for creating a new program.
type MsgCreateProgram struct {
	ProgramId       string `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty" yaml:"program_id"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Detail          string `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	OperatorAddress string `protobuf:"bytes,4,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
}

func (m *MsgCreateProgram) Reset()         { *m = MsgCreateProgram{} }
func (m *MsgCreateProgram) String() string { return proto.CompactTextString(m) }
func (*MsgCreateProgram) ProtoMessage()    {}
func (*MsgCreateProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{0}
}
func (m *MsgCreateProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateProgram.Merge(m, src)
}
func (m *MsgCreateProgram) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateProgram.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateProgram proto.InternalMessageInfo

// MsgEditProgram defines a SDK message for editing a program.
type MsgEditProgram struct {
	ProgramId       string `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty" yaml:"program_id"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Detail          string `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	OperatorAddress string `protobuf:"bytes,4,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
}

func (m *MsgEditProgram) Reset()         { *m = MsgEditProgram{} }
func (m *MsgEditProgram) String() string { return proto.CompactTextString(m) }
func (*MsgEditProgram) ProtoMessage()    {}
func (*MsgEditProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{1}
}
func (m *MsgEditProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditProgram.Merge(m, src)
}
func (m *MsgEditProgram) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditProgram.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditProgram proto.InternalMessageInfo

// MsgCreateProgramResponse defines the Msg/CreateProgram response type.
type MsgCreateProgramResponse struct {
}

func (m *MsgCreateProgramResponse) Reset()         { *m = MsgCreateProgramResponse{} }
func (m *MsgCreateProgramResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateProgramResponse) ProtoMessage()    {}
func (*MsgCreateProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{2}
}
func (m *MsgCreateProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateProgramResponse.Merge(m, src)
}
func (m *MsgCreateProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateProgramResponse proto.InternalMessageInfo

// MsgEditProgramResponse defines the Msg/EditProgram response type.
type MsgEditProgramResponse struct {
}

func (m *MsgEditProgramResponse) Reset()         { *m = MsgEditProgramResponse{} }
func (m *MsgEditProgramResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEditProgramResponse) ProtoMessage()    {}
func (*MsgEditProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{3}
}
func (m *MsgEditProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditProgramResponse.Merge(m, src)
}
func (m *MsgEditProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditProgramResponse proto.InternalMessageInfo

type MsgActivateProgram struct {
	ProgramId       string `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty" yaml:"program_id"`
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
}

func (m *MsgActivateProgram) Reset()         { *m = MsgActivateProgram{} }
func (m *MsgActivateProgram) String() string { return proto.CompactTextString(m) }
func (*MsgActivateProgram) ProtoMessage()    {}
func (*MsgActivateProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{4}
}
func (m *MsgActivateProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgActivateProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgActivateProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgActivateProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgActivateProgram.Merge(m, src)
}
func (m *MsgActivateProgram) XXX_Size() int {
	return m.Size()
}
func (m *MsgActivateProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgActivateProgram.DiscardUnknown(m)
}

var xxx_messageInfo_MsgActivateProgram proto.InternalMessageInfo

type MsgActivateProgramResponse struct {
}

func (m *MsgActivateProgramResponse) Reset()         { *m = MsgActivateProgramResponse{} }
func (m *MsgActivateProgramResponse) String() string { return proto.CompactTextString(m) }
func (*MsgActivateProgramResponse) ProtoMessage()    {}
func (*MsgActivateProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{5}
}
func (m *MsgActivateProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgActivateProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgActivateProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgActivateProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgActivateProgramResponse.Merge(m, src)
}
func (m *MsgActivateProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgActivateProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgActivateProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgActivateProgramResponse proto.InternalMessageInfo

type MsgCloseProgram struct {
	ProgramId       string `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty" yaml:"program_id"`
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
}

func (m *MsgCloseProgram) Reset()         { *m = MsgCloseProgram{} }
func (m *MsgCloseProgram) String() string { return proto.CompactTextString(m) }
func (*MsgCloseProgram) ProtoMessage()    {}
func (*MsgCloseProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{6}
}
func (m *MsgCloseProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCloseProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCloseProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCloseProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCloseProgram.Merge(m, src)
}
func (m *MsgCloseProgram) XXX_Size() int {
	return m.Size()
}
func (m *MsgCloseProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCloseProgram.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCloseProgram proto.InternalMessageInfo

type MsgCloseProgramResponse struct {
}

func (m *MsgCloseProgramResponse) Reset()         { *m = MsgCloseProgramResponse{} }
func (m *MsgCloseProgramResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCloseProgramResponse) ProtoMessage()    {}
func (*MsgCloseProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{7}
}
func (m *MsgCloseProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCloseProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCloseProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCloseProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCloseProgramResponse.Merge(m, src)
}
func (m *MsgCloseProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCloseProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCloseProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCloseProgramResponse proto.InternalMessageInfo

// MsgSubmitFinding defines a message to submit a finding.
type MsgSubmitFinding struct {
	ProgramId       string        `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty" yaml:"program_id"`
	FindingId       string        `protobuf:"bytes,2,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty" yaml:"finding_id"`
	FindingHash     string        `protobuf:"bytes,3,opt,name=finding_hash,json=findingHash,proto3" json:"finding_hash,omitempty" yaml:"finding_hash"`
	OperatorAddress string        `protobuf:"bytes,4,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
	SeverityLevel   SeverityLevel `protobuf:"varint,5,opt,name=severity_level,json=severityLevel,proto3,enum=shentu.bounty.v1.SeverityLevel" json:"severity_level,omitempty" yaml:"severity_level"`
}

func (m *MsgSubmitFinding) Reset()         { *m = MsgSubmitFinding{} }
func (m *MsgSubmitFinding) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitFinding) ProtoMessage()    {}
func (*MsgSubmitFinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{8}
}
func (m *MsgSubmitFinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitFinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitFinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitFinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitFinding.Merge(m, src)
}
func (m *MsgSubmitFinding) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitFinding) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitFinding.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitFinding proto.InternalMessageInfo

// MsgSubmitFindingResponse defines the MsgSubmitFinding response type.
type MsgSubmitFindingResponse struct {
}

func (m *MsgSubmitFindingResponse) Reset()         { *m = MsgSubmitFindingResponse{} }
func (m *MsgSubmitFindingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitFindingResponse) ProtoMessage()    {}
func (*MsgSubmitFindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{9}
}
func (m *MsgSubmitFindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitFindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitFindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitFindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitFindingResponse.Merge(m, src)
}
func (m *MsgSubmitFindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitFindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitFindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitFindingResponse proto.InternalMessageInfo

// MsgEditFinding defines a message to edit a finding.
type MsgEditFinding struct {
	FindingId       string        `protobuf:"bytes,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty" yaml:"finding_id"`
	FindingHash     string        `protobuf:"bytes,2,opt,name=finding_hash,json=findingHash,proto3" json:"finding_hash,omitempty" yaml:"finding_hash"`
	OperatorAddress string        `protobuf:"bytes,3,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
	SeverityLevel   SeverityLevel `protobuf:"varint,4,opt,name=severity_level,json=severityLevel,proto3,enum=shentu.bounty.v1.SeverityLevel" json:"severity_level,omitempty" yaml:"severity_level"`
	PaymentHash     string        `protobuf:"bytes,5,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty" yaml:"payment_hash"`
}

func (m *MsgEditFinding) Reset()         { *m = MsgEditFinding{} }
func (m *MsgEditFinding) String() string { return proto.CompactTextString(m) }
func (*MsgEditFinding) ProtoMessage()    {}
func (*MsgEditFinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{10}
}
func (m *MsgEditFinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditFinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditFinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditFinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditFinding.Merge(m, src)
}
func (m *MsgEditFinding) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditFinding) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditFinding.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditFinding proto.InternalMessageInfo

// MsgEditFindingResponse defines the MsgEditFinding response type.
type MsgEditFindingResponse struct {
}

func (m *MsgEditFindingResponse) Reset()         { *m = MsgEditFindingResponse{} }
func (m *MsgEditFindingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEditFindingResponse) ProtoMessage()    {}
func (*MsgEditFindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{11}
}
func (m *MsgEditFindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditFindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditFindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditFindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditFindingResponse.Merge(m, src)
}
func (m *MsgEditFindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditFindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditFindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditFindingResponse proto.InternalMessageInfo

// MsgConfirmFinding defines a message to confirm a finding to an existing finding.
type MsgConfirmFinding struct {
	FindingId       string `protobuf:"bytes,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty" yaml:"finding_id"`
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
	Fingerprint     string `protobuf:"bytes,3,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (m *MsgConfirmFinding) Reset()         { *m = MsgConfirmFinding{} }
func (m *MsgConfirmFinding) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmFinding) ProtoMessage()    {}
func (*MsgConfirmFinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{12}
}
func (m *MsgConfirmFinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmFinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmFinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmFinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmFinding.Merge(m, src)
}
func (m *MsgConfirmFinding) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmFinding) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmFinding.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmFinding proto.InternalMessageInfo

// MsgConfirmFindingResponse defines the Msg/AcceptFinding response type.
type MsgConfirmFindingResponse struct {
}

func (m *MsgConfirmFindingResponse) Reset()         { *m = MsgConfirmFindingResponse{} }
func (m *MsgConfirmFindingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmFindingResponse) ProtoMessage()    {}
func (*MsgConfirmFindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{13}
}
func (m *MsgConfirmFindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmFindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmFindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmFindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmFindingResponse.Merge(m, src)
}
func (m *MsgConfirmFindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmFindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmFindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmFindingResponse proto.InternalMessageInfo

// MsgActivateFinding defines a message to activate a finding to an existing finding.
type MsgActivateFinding struct {
	FindingId       string `protobuf:"bytes,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty" yaml:"finding_id"`
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
}

func (m *MsgActivateFinding) Reset()         { *m = MsgActivateFinding{} }
func (m *MsgActivateFinding) String() string { return proto.CompactTextString(m) }
func (*MsgActivateFinding) ProtoMessage()    {}
func (*MsgActivateFinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{14}
}
func (m *MsgActivateFinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgActivateFinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgActivateFinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgActivateFinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgActivateFinding.Merge(m, src)
}
func (m *MsgActivateFinding) XXX_Size() int {
	return m.Size()
}
func (m *MsgActivateFinding) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgActivateFinding.DiscardUnknown(m)
}

var xxx_messageInfo_MsgActivateFinding proto.InternalMessageInfo

// MsgActivateFindingResponse defines the Msg/AcceptFinding response type.
type MsgActivateFindingResponse struct {
}

func (m *MsgActivateFindingResponse) Reset()         { *m = MsgActivateFindingResponse{} }
func (m *MsgActivateFindingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgActivateFindingResponse) ProtoMessage()    {}
func (*MsgActivateFindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{15}
}
func (m *MsgActivateFindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgActivateFindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgActivateFindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgActivateFindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgActivateFindingResponse.Merge(m, src)
}
func (m *MsgActivateFindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgActivateFindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgActivateFindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgActivateFindingResponse proto.InternalMessageInfo

// MsgConfirmFindingPaid defines a message to confirm a finding has been paid.
type MsgConfirmFindingPaid struct {
	FindingId       string `protobuf:"bytes,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty" yaml:"finding_id"`
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
}

func (m *MsgConfirmFindingPaid) Reset()         { *m = MsgConfirmFindingPaid{} }
func (m *MsgConfirmFindingPaid) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmFindingPaid) ProtoMessage()    {}
func (*MsgConfirmFindingPaid) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{16}
}
func (m *MsgConfirmFindingPaid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmFindingPaid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmFindingPaid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmFindingPaid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmFindingPaid.Merge(m, src)
}
func (m *MsgConfirmFindingPaid) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmFindingPaid) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmFindingPaid.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmFindingPaid proto.InternalMessageInfo

// MsgConfirmFindingPaidResponse defines the Msg/ConfirmFindingPaid response type.
type MsgConfirmFindingPaidResponse struct {
}

func (m *MsgConfirmFindingPaidResponse) Reset()         { *m = MsgConfirmFindingPaidResponse{} }
func (m *MsgConfirmFindingPaidResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmFindingPaidResponse) ProtoMessage()    {}
func (*MsgConfirmFindingPaidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{17}
}
func (m *MsgConfirmFindingPaidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmFindingPaidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmFindingPaidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmFindingPaidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmFindingPaidResponse.Merge(m, src)
}
func (m *MsgConfirmFindingPaidResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmFindingPaidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmFindingPaidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmFindingPaidResponse proto.InternalMessageInfo

// MsgCloseFinding defines a message to close a finding.
type MsgCloseFinding struct {
	FindingId       string `protobuf:"bytes,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty" yaml:"finding_id"`
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
}

func (m *MsgCloseFinding) Reset()         { *m = MsgCloseFinding{} }
func (m *MsgCloseFinding) String() string { return proto.CompactTextString(m) }
func (*MsgCloseFinding) ProtoMessage()    {}
func (*MsgCloseFinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{18}
}
func (m *MsgCloseFinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCloseFinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCloseFinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCloseFinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCloseFinding.Merge(m, src)
}
func (m *MsgCloseFinding) XXX_Size() int {
	return m.Size()
}
func (m *MsgCloseFinding) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCloseFinding.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCloseFinding proto.InternalMessageInfo

// MsgCloseFindingResponse defines the Msg/CloseFinding response type.
type MsgCloseFindingResponse struct {
}

func (m *MsgCloseFindingResponse) Reset()         { *m = MsgCloseFindingResponse{} }
func (m *MsgCloseFindingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCloseFindingResponse) ProtoMessage()    {}
func (*MsgCloseFindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{19}
}
func (m *MsgCloseFindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCloseFindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCloseFindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCloseFindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCloseFindingResponse.Merge(m, src)
}
func (m *MsgCloseFindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCloseFindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCloseFindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCloseFindingResponse proto.InternalMessageInfo

// MsgPublishFinding defines a message to publish a finding.
type MsgPublishFinding struct {
	FindingId       string `protobuf:"bytes,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty" yaml:"finding_id"`
	Title           string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Detail          string `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	Description     string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	ProofOfConcept  string `protobuf:"bytes,5,opt,name=proof_of_concept,json=proofOfConcept,proto3" json:"proof_of_concept,omitempty" yaml:"proof_of_concept"`
	OperatorAddress string `protobuf:"bytes,6,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
}

func (m *MsgPublishFinding) Reset()         { *m = MsgPublishFinding{} }
func (m *MsgPublishFinding) String() string { return proto.CompactTextString(m) }
func (*MsgPublishFinding) ProtoMessage()    {}
func (*MsgPublishFinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{20}
}
func (m *MsgPublishFinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPublishFinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPublishFinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPublishFinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPublishFinding.Merge(m, src)
}
func (m *MsgPublishFinding) XXX_Size() int {
	return m.Size()
}
func (m *MsgPublishFinding) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPublishFinding.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPublishFinding proto.InternalMessageInfo

// MsgPublishFindingResponse defines the MsgPublishFinding response type.
type MsgPublishFindingResponse struct {
}

func (m *MsgPublishFindingResponse) Reset()         { *m = MsgPublishFindingResponse{} }
func (m *MsgPublishFindingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPublishFindingResponse) ProtoMessage()    {}
func (*MsgPublishFindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{21}
}
func (m *MsgPublishFindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPublishFindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPublishFindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPublishFindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPublishFindingResponse.Merge(m, src)
}
func (m *MsgPublishFindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPublishFindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPublishFindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPublishFindingResponse proto.InternalMessageInfo

// MsgCreateTheorem defines a message to create a new theorem.
type MsgCreateTheorem struct {
	Title        string       `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description  string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Code         string       `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	InitialGrant []types.Coin `protobuf:"bytes,4,rep,name=initial_grant,json=initialGrant,proto3" json:"initial_grant"`
	Proposer     string       `protobuf:"bytes,5,opt,name=proposer,proto3" json:"proposer,omitempty"`
}

func (m *MsgCreateTheorem) Reset()         { *m = MsgCreateTheorem{} }
func (m *MsgCreateTheorem) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTheorem) ProtoMessage()    {}
func (*MsgCreateTheorem) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{22}
}
func (m *MsgCreateTheorem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTheorem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTheorem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTheorem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTheorem.Merge(m, src)
}
func (m *MsgCreateTheorem) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTheorem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTheorem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTheorem proto.InternalMessageInfo

// MsgCreateTheoremResponse defines the Msg/CreateTheorem response type.
type MsgCreateTheoremResponse struct {
	TheoremId uint64 `protobuf:"varint,1,opt,name=theorem_id,json=theoremId,proto3" json:"theorem_id,omitempty"`
}

func (m *MsgCreateTheoremResponse) Reset()         { *m = MsgCreateTheoremResponse{} }
func (m *MsgCreateTheoremResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTheoremResponse) ProtoMessage()    {}
func (*MsgCreateTheoremResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{23}
}
func (m *MsgCreateTheoremResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTheoremResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTheoremResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTheoremResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTheoremResponse.Merge(m, src)
}
func (m *MsgCreateTheoremResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTheoremResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTheoremResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTheoremResponse proto.InternalMessageInfo

func (m *MsgCreateTheoremResponse) GetTheoremId() uint64 {
	if m != nil {
		return m.TheoremId
	}
	return 0
}

// MsgGrant defines a message to grant funds to a theorem.
type MsgGrant struct {
	// theorem_id defines the unique id of the theorem.
	TheoremId uint64       `protobuf:"varint,1,opt,name=theorem_id,json=theoremId,proto3" json:"theorem_id"`
	Grantor   string       `protobuf:"bytes,2,opt,name=grantor,proto3" json:"grantor,omitempty"`
	Amount    []types.Coin `protobuf:"bytes,3,rep,name=amount,proto3" json:"amount"`
}

func (m *MsgGrant) Reset()         { *m = MsgGrant{} }
func (m *MsgGrant) String() string { return proto.CompactTextString(m) }
func (*MsgGrant) ProtoMessage()    {}
func (*MsgGrant) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{24}
}
func (m *MsgGrant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGrant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGrant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGrant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGrant.Merge(m, src)
}
func (m *MsgGrant) XXX_Size() int {
	return m.Size()
}
func (m *MsgGrant) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGrant.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGrant proto.InternalMessageInfo

// MsgGrantResponse defines the Msg/Grant response type.
type MsgGrantResponse struct {
}

func (m *MsgGrantResponse) Reset()         { *m = MsgGrantResponse{} }
func (m *MsgGrantResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGrantResponse) ProtoMessage()    {}
func (*MsgGrantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{25}
}
func (m *MsgGrantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGrantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGrantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGrantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGrantResponse.Merge(m, src)
}
func (m *MsgGrantResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGrantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGrantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGrantResponse proto.InternalMessageInfo

// MsgSubmitProofHash defines a message to submit a proof hash.
type MsgSubmitProofHash struct {
	TheoremId uint64       `protobuf:"varint,1,opt,name=theorem_id,json=theoremId,proto3" json:"theorem_id"`
	Prover    string       `protobuf:"bytes,2,opt,name=prover,proto3" json:"prover,omitempty"`
	ProofHash string       `protobuf:"bytes,3,opt,name=proof_hash,json=proofHash,proto3" json:"proof_hash,omitempty"`
	Deposit   []types.Coin `protobuf:"bytes,4,rep,name=deposit,proto3" json:"deposit"`
}

func (m *MsgSubmitProofHash) Reset()         { *m = MsgSubmitProofHash{} }
func (m *MsgSubmitProofHash) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitProofHash) ProtoMessage()    {}
func (*MsgSubmitProofHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{26}
}
func (m *MsgSubmitProofHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitProofHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitProofHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitProofHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitProofHash.Merge(m, src)
}
func (m *MsgSubmitProofHash) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitProofHash) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitProofHash.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitProofHash proto.InternalMessageInfo

// MsgSubmitProofHashResponse defines the Msg/SubmitProofHash response type.
type MsgSubmitProofHashResponse struct {
}

func (m *MsgSubmitProofHashResponse) Reset()         { *m = MsgSubmitProofHashResponse{} }
func (m *MsgSubmitProofHashResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitProofHashResponse) ProtoMessage()    {}
func (*MsgSubmitProofHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{27}
}
func (m *MsgSubmitProofHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitProofHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitProofHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitProofHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitProofHashResponse.Merge(m, src)
}
func (m *MsgSubmitProofHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitProofHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitProofHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitProofHashResponse proto.InternalMessageInfo

// MsgSubmitProofDetail defines a message to submit proof details.
type MsgSubmitProofDetail struct {
	ProofId string `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id"`
	Prover  string `protobuf:"bytes,2,opt,name=prover,proto3" json:"prover,omitempty"`
	Detail  string `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (m *MsgSubmitProofDetail) Reset()         { *m = MsgSubmitProofDetail{} }
func (m *MsgSubmitProofDetail) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitProofDetail) ProtoMessage()    {}
func (*MsgSubmitProofDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{28}
}
func (m *MsgSubmitProofDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitProofDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitProofDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitProofDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitProofDetail.Merge(m, src)
}
func (m *MsgSubmitProofDetail) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitProofDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitProofDetail.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitProofDetail proto.InternalMessageInfo

// MsgSubmitProofDetailResponse defines the Msg/SubmitProofDetail response type.
type MsgSubmitProofDetailResponse struct {
}

func (m *MsgSubmitProofDetailResponse) Reset()         { *m = MsgSubmitProofDetailResponse{} }
func (m *MsgSubmitProofDetailResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitProofDetailResponse) ProtoMessage()    {}
func (*MsgSubmitProofDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{29}
}
func (m *MsgSubmitProofDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitProofDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitProofDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitProofDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitProofDetailResponse.Merge(m, src)
}
func (m *MsgSubmitProofDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitProofDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitProofDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitProofDetailResponse proto.InternalMessageInfo

// MsgSubmitProofVerification defines a message to submit proof verification.
type MsgSubmitProofVerification struct {
	ProofId string      `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	Status  ProofStatus `protobuf:"varint,2,opt,name=status,proto3,enum=shentu.bounty.v1.ProofStatus" json:"status,omitempty"`
	Checker string      `protobuf:"bytes,3,opt,name=checker,proto3" json:"checker,omitempty"`
}

func (m *MsgSubmitProofVerification) Reset()         { *m = MsgSubmitProofVerification{} }
func (m *MsgSubmitProofVerification) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitProofVerification) ProtoMessage()    {}
func (*MsgSubmitProofVerification) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{30}
}
func (m *MsgSubmitProofVerification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitProofVerification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitProofVerification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitProofVerification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitProofVerification.Merge(m, src)
}
func (m *MsgSubmitProofVerification) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitProofVerification) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitProofVerification.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitProofVerification proto.InternalMessageInfo

// MsgSubmitProofVerificationResponse defines the Msg/SubmitProofVerification response type.
type MsgSubmitProofVerificationResponse struct {
}

func (m *MsgSubmitProofVerificationResponse) Reset()         { *m = MsgSubmitProofVerificationResponse{} }
func (m *MsgSubmitProofVerificationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitProofVerificationResponse) ProtoMessage()    {}
func (*MsgSubmitProofVerificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{31}
}
func (m *MsgSubmitProofVerificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitProofVerificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitProofVerificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitProofVerificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitProofVerificationResponse.Merge(m, src)
}
func (m *MsgSubmitProofVerificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitProofVerificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitProofVerificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitProofVerificationResponse proto.InternalMessageInfo

// MsgWithdrawReward defines a message to withdraw rewards.
type MsgWithdrawReward struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *MsgWithdrawReward) Reset()         { *m = MsgWithdrawReward{} }
func (m *MsgWithdrawReward) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawReward) ProtoMessage()    {}
func (*MsgWithdrawReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{32}
}
func (m *MsgWithdrawReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawReward.Merge(m, src)
}
func (m *MsgWithdrawReward) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawReward) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawReward.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawReward proto.InternalMessageInfo

type MsgWithdrawRewardResponse struct {
}

func (m *MsgWithdrawRewardResponse) Reset()         { *m = MsgWithdrawRewardResponse{} }
func (m *MsgWithdrawRewardResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawRewardResponse) ProtoMessage()    {}
func (*MsgWithdrawRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{33}
}
func (m *MsgWithdrawRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawRewardResponse.Merge(m, src)
}
func (m *MsgWithdrawRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawRewardResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateProgram)(nil), "shentu.bounty.v1.MsgCreateProgram")
	proto.RegisterType((*MsgEditProgram)(nil), "shentu.bounty.v1.MsgEditProgram")
	proto.RegisterType((*MsgCreateProgramResponse)(nil), "shentu.bounty.v1.MsgCreateProgramResponse")
	proto.RegisterType((*MsgEditProgramResponse)(nil), "shentu.bounty.v1.MsgEditProgramResponse")
	proto.RegisterType((*MsgActivateProgram)(nil), "shentu.bounty.v1.MsgActivateProgram")
	proto.RegisterType((*MsgActivateProgramResponse)(nil), "shentu.bounty.v1.MsgActivateProgramResponse")
	proto.RegisterType((*MsgCloseProgram)(nil), "shentu.bounty.v1.MsgCloseProgram")
	proto.RegisterType((*MsgCloseProgramResponse)(nil), "shentu.bounty.v1.MsgCloseProgramResponse")
	proto.RegisterType((*MsgSubmitFinding)(nil), "shentu.bounty.v1.MsgSubmitFinding")
	proto.RegisterType((*MsgSubmitFindingResponse)(nil), "shentu.bounty.v1.MsgSubmitFindingResponse")
	proto.RegisterType((*MsgEditFinding)(nil), "shentu.bounty.v1.MsgEditFinding")
	proto.RegisterType((*MsgEditFindingResponse)(nil), "shentu.bounty.v1.MsgEditFindingResponse")
	proto.RegisterType((*MsgConfirmFinding)(nil), "shentu.bounty.v1.MsgConfirmFinding")
	proto.RegisterType((*MsgConfirmFindingResponse)(nil), "shentu.bounty.v1.MsgConfirmFindingResponse")
	proto.RegisterType((*MsgActivateFinding)(nil), "shentu.bounty.v1.MsgActivateFinding")
	proto.RegisterType((*MsgActivateFindingResponse)(nil), "shentu.bounty.v1.MsgActivateFindingResponse")
	proto.RegisterType((*MsgConfirmFindingPaid)(nil), "shentu.bounty.v1.MsgConfirmFindingPaid")
	proto.RegisterType((*MsgConfirmFindingPaidResponse)(nil), "shentu.bounty.v1.MsgConfirmFindingPaidResponse")
	proto.RegisterType((*MsgCloseFinding)(nil), "shentu.bounty.v1.MsgCloseFinding")
	proto.RegisterType((*MsgCloseFindingResponse)(nil), "shentu.bounty.v1.MsgCloseFindingResponse")
	proto.RegisterType((*MsgPublishFinding)(nil), "shentu.bounty.v1.MsgPublishFinding")
	proto.RegisterType((*MsgPublishFindingResponse)(nil), "shentu.bounty.v1.MsgPublishFindingResponse")
	proto.RegisterType((*MsgCreateTheorem)(nil), "shentu.bounty.v1.MsgCreateTheorem")
	proto.RegisterType((*MsgCreateTheoremResponse)(nil), "shentu.bounty.v1.MsgCreateTheoremResponse")
	proto.RegisterType((*MsgGrant)(nil), "shentu.bounty.v1.MsgGrant")
	proto.RegisterType((*MsgGrantResponse)(nil), "shentu.bounty.v1.MsgGrantResponse")
	proto.RegisterType((*MsgSubmitProofHash)(nil), "shentu.bounty.v1.MsgSubmitProofHash")
	proto.RegisterType((*MsgSubmitProofHashResponse)(nil), "shentu.bounty.v1.MsgSubmitProofHashResponse")
	proto.RegisterType((*MsgSubmitProofDetail)(nil), "shentu.bounty.v1.MsgSubmitProofDetail")
	proto.RegisterType((*MsgSubmitProofDetailResponse)(nil), "shentu.bounty.v1.MsgSubmitProofDetailResponse")
	proto.RegisterType((*MsgSubmitProofVerification)(nil), "shentu.bounty.v1.MsgSubmitProofVerification")
	proto.RegisterType((*MsgSubmitProofVerificationResponse)(nil), "shentu.bounty.v1.MsgSubmitProofVerificationResponse")
	proto.RegisterType((*MsgWithdrawReward)(nil), "shentu.bounty.v1.MsgWithdrawReward")
	proto.RegisterType((*MsgWithdrawRewardResponse)(nil), "shentu.bounty.v1.MsgWithdrawRewardResponse")
}

func init() { proto.RegisterFile("shentu/bounty/v1/tx.proto", fileDescriptor_1e4b4296bac3db30) }

var fileDescriptor_1e4b4296bac3db30 = []byte{
	// 1615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0xcd, 0x6f, 0xdc, 0xc4,
	0x1b, 0x8e, 0xb3, 0x49, 0xda, 0x4c, 0xbe, 0xdd, 0x7c, 0xec, 0xba, 0xcd, 0x6e, 0x7e, 0xfe, 0x15,
	0x48, 0x43, 0xd9, 0x6d, 0x42, 0x0a, 0x65, 0x41, 0x48, 0x4d, 0x69, 0x4b, 0x04, 0x11, 0x91, 0x83,
	0x40, 0x20, 0xa4, 0x95, 0x77, 0x3d, 0xeb, 0xb5, 0xba, 0xf6, 0x58, 0x9e, 0xd9, 0x6d, 0x73, 0xe0,
	0xc2, 0x09, 0xb8, 0xc0, 0x3f, 0x80, 0xe8, 0x91, 0x63, 0x0f, 0xfc, 0x01, 0x9c, 0x50, 0x0f, 0x1c,
	0xaa, 0x5e, 0x40, 0x42, 0x5a, 0xa1, 0xf6, 0x50, 0x54, 0x71, 0x40, 0x11, 0x17, 0x6e, 0xc8, 0x33,
	0x63, 0xaf, 0xed, 0xb5, 0xe3, 0xcd, 0x26, 0x12, 0xe5, 0x12, 0xed, 0xbc, 0xef, 0x33, 0x1f, 0xcf,
	0xf3, 0xce, 0xbc, 0xef, 0x8c, 0x03, 0x72, 0xb8, 0x01, 0x2d, 0xd2, 0x2a, 0x55, 0x51, 0xcb, 0x22,
	0xfb, 0xa5, 0xf6, 0x7a, 0x89, 0xdc, 0x29, 0xda, 0x0e, 0x22, 0x48, 0x9c, 0x65, 0xae, 0x22, 0x73,
	0x15, 0xdb, 0xeb, 0xd2, 0xbc, 0x8e, 0x74, 0x44, 0x9d, 0x25, 0xf7, 0x17, 0xc3, 0x49, 0x05, 0x1d,
	0x21, 0xbd, 0x09, 0x4b, 0xb4, 0x55, 0x6d, 0xd5, 0x4b, 0xc4, 0x30, 0x21, 0x26, 0xaa, 0x69, 0x73,
	0x40, 0x2e, 0x0a, 0x50, 0xad, 0x7d, 0xcf, 0x55, 0x43, 0xd8, 0x44, 0xb8, 0xc2, 0x06, 0x65, 0x0d,
	0xee, 0x5a, 0x62, 0xad, 0x92, 0x89, 0x75, 0x77, 0x59, 0x26, 0xd6, 0xb9, 0x23, 0xcf, 0x1d, 0x55,
	0x15, 0xc3, 0x52, 0x7b, 0xbd, 0x0a, 0x89, 0xba, 0x5e, 0xaa, 0x21, 0xc3, 0xe2, 0xfe, 0x39, 0xd5,
	0x34, 0x2c, 0x54, 0xa2, 0x7f, 0xb9, 0x69, 0xb9, 0x87, 0x25, 0x27, 0x45, 0xdd, 0xf2, 0x5f, 0x02,
	0x98, 0xdd, 0xc1, 0xfa, 0x35, 0x07, 0xaa, 0x04, 0xee, 0x3a, 0x48, 0x77, 0x54, 0x53, 0xdc, 0x04,
	0xc0, 0x66, 0x3f, 0x2b, 0x86, 0x96, 0x15, 0x56, 0x84, 0xd5, 0xf1, 0xad, 0x85, 0x83, 0x4e, 0x61,
	0x6e, 0x5f, 0x35, 0x9b, 0x65, 0xb9, 0xeb, 0x93, 0x95, 0x71, 0xde, 0xd8, 0xd6, 0x44, 0x11, 0x8c,
	0x58, 0xaa, 0x09, 0xb3, 0xc3, 0x2e, 0x5e, 0xa1, 0xbf, 0xc5, 0x45, 0x30, 0xa6, 0x41, 0xa2, 0x1a,
	0xcd, 0x6c, 0x86, 0x5a, 0x79, 0x4b, 0xbc, 0x01, 0x66, 0x91, 0x0d, 0x1d, 0x95, 0x20, 0xa7, 0xa2,
	0x6a, 0x9a, 0x03, 0x31, 0xce, 0x8e, 0xd0, 0x79, 0xce, 0x1e, 0x74, 0x0a, 0x4b, 0x6c, 0x9e, 0x28,
	0x42, 0x56, 0x66, 0x3c, 0xd3, 0x55, 0x66, 0x29, 0xbf, 0xf2, 0xf9, 0xdd, 0xc2, 0xd0, 0xef, 0x77,
	0x0b, 0x43, 0x9f, 0x3d, 0xb9, 0xb7, 0xd6, 0x33, 0xe4, 0x97, 0x4f, 0xee, 0xad, 0xcd, 0x73, 0xe2,
	0x21, 0x86, 0xf2, 0x9f, 0x02, 0x98, 0xde, 0xc1, 0xfa, 0x75, 0xcd, 0x20, 0xff, 0x3d, 0xd2, 0x9b,
	0xa9, 0xa4, 0x45, 0x4e, 0x3a, 0xc0, 0x4f, 0x96, 0x40, 0x36, 0x1a, 0x68, 0x05, 0x62, 0x1b, 0x59,
	0x18, 0xca, 0x59, 0xb0, 0x18, 0x56, 0xc3, 0xf7, 0xfc, 0x24, 0x00, 0x71, 0x07, 0xeb, 0x57, 0x6b,
	0xc4, 0x68, 0x1f, 0x7b, 0x87, 0xc4, 0x09, 0x30, 0x3c, 0x80, 0x00, 0x57, 0x52, 0x05, 0x58, 0xe4,
	0x02, 0x44, 0xd6, 0x2d, 0x9f, 0x03, 0x52, 0x2f, 0x1b, 0x9f, 0xec, 0x8f, 0x02, 0x98, 0x71, 0x35,
	0x6a, 0x22, 0xfc, 0x8c, 0x30, 0xbd, 0x9c, 0xca, 0xf4, 0x8c, 0xb7, 0xbf, 0x03, 0x8b, 0x96, 0x73,
	0x60, 0x29, 0xc2, 0xc3, 0xe7, 0xf8, 0x4d, 0x86, 0x1e, 0xf8, 0xbd, 0x56, 0xd5, 0x34, 0xc8, 0x0d,
	0xc3, 0xd2, 0x0c, 0x4b, 0x1f, 0x90, 0xe4, 0x26, 0x00, 0x75, 0x36, 0x80, 0xdb, 0x6b, 0x38, 0xda,
	0xab, 0xeb, 0x93, 0x95, 0x71, 0xde, 0xd8, 0xd6, 0xc4, 0x32, 0x98, 0xf4, 0x3c, 0x0d, 0x15, 0x37,
	0xd8, 0x19, 0xd9, 0x5a, 0x3a, 0xe8, 0x14, 0xce, 0x84, 0xfb, 0xb9, 0x5e, 0x59, 0x99, 0xe0, 0xcd,
	0xb7, 0x55, 0xdc, 0x38, 0xa9, 0x13, 0x24, 0xaa, 0x60, 0x1a, 0xc3, 0x36, 0x74, 0x0c, 0xb2, 0x5f,
	0x69, 0xc2, 0x36, 0x6c, 0x66, 0x47, 0x57, 0x84, 0xd5, 0xe9, 0x8d, 0x42, 0x31, 0x9a, 0xf8, 0x8b,
	0x7b, 0x1c, 0xf7, 0xae, 0x0b, 0xdb, 0xca, 0x1d, 0x74, 0x0a, 0x0b, 0x6c, 0x9a, 0xf0, 0x00, 0xb2,
	0x32, 0x85, 0x83, 0xc8, 0x23, 0x64, 0xa6, 0x50, 0x28, 0xf8, 0x31, 0x0d, 0xd9, 0xfc, 0xd8, 0x7d,
	0x9b, 0xf1, 0xb3, 0x56, 0x20, 0x72, 0x81, 0x18, 0x08, 0x03, 0xc6, 0x60, 0xf8, 0x98, 0x31, 0xc8,
	0x9c, 0x48, 0x0c, 0x46, 0x4e, 0x38, 0x06, 0x2e, 0x4d, 0x5b, 0xdd, 0x37, 0xa1, 0x45, 0x18, 0xcd,
	0xd1, 0x28, 0xcd, 0xa0, 0x57, 0x56, 0x26, 0x78, 0xd3, 0xa5, 0x79, 0xc4, 0x24, 0xeb, 0x45, 0xaf,
	0x9b, 0x48, 0xa3, 0xb1, 0xfb, 0x43, 0x00, 0x73, 0xee, 0x99, 0x44, 0x56, 0xdd, 0x70, 0xcc, 0xe3,
	0x85, 0xef, 0x84, 0xb2, 0x8b, 0xb8, 0x02, 0xdc, 0xc8, 0xea, 0xd0, 0xb1, 0x1d, 0xc3, 0x22, 0xbc,
	0x5a, 0x05, 0x4d, 0xe5, 0x57, 0x53, 0x55, 0x58, 0xf0, 0xf2, 0x4f, 0x88, 0x98, 0x7c, 0x16, 0xe4,
	0x7a, 0xd8, 0x26, 0x15, 0x95, 0x67, 0x42, 0x8c, 0x01, 0x8a, 0x8a, 0xc7, 0x35, 0x5c, 0x54, 0xa2,
	0x64, 0x1f, 0x0a, 0x60, 0xa1, 0x47, 0x8a, 0x5d, 0xd5, 0xd0, 0xfe, 0x65, 0xbe, 0xaf, 0xa7, 0xf2,
	0xcd, 0xc5, 0x86, 0xd6, 0x5d, 0xba, 0x5c, 0x00, 0xcb, 0xb1, 0x9c, 0x62, 0x4b, 0xe9, 0xb3, 0x11,
	0xdf, 0x23, 0x96, 0x52, 0x2f, 0xb8, 0x81, 0x52, 0x1a, 0x8d, 0xec, 0xdf, 0xc3, 0xf4, 0x48, 0xef,
	0xb6, 0xaa, 0x4d, 0x03, 0x37, 0x8e, 0xc7, 0x72, 0x1e, 0x8c, 0x12, 0x83, 0x34, 0xbd, 0x8b, 0x24,
	0x6b, 0x24, 0xde, 0x24, 0xaf, 0x80, 0x09, 0x0d, 0xe2, 0x9a, 0x63, 0xd8, 0xc4, 0x40, 0x16, 0x2f,
	0x81, 0x8b, 0x07, 0x9d, 0x82, 0xc8, 0x26, 0x09, 0x38, 0x65, 0x25, 0x08, 0x15, 0xaf, 0x83, 0x59,
	0xdb, 0x41, 0xa8, 0x5e, 0x41, 0xf5, 0x4a, 0x0d, 0x59, 0x35, 0x68, 0x13, 0x9e, 0x16, 0x03, 0x6a,
	0x46, 0x11, 0xb2, 0x32, 0x4d, 0x4d, 0xef, 0xd5, 0xaf, 0x31, 0x43, 0x6c, 0x50, 0xc6, 0x06, 0x08,
	0x4a, 0xff, 0xf9, 0x25, 0xac, 0x32, 0xcf, 0x2f, 0x61, 0xa3, 0x1f, 0x98, 0xaf, 0x86, 0x03, 0x8f,
	0x9a, 0xf7, 0x1b, 0x10, 0x39, 0xd0, 0xec, 0x2a, 0x2c, 0x04, 0x15, 0x5e, 0x09, 0x2b, 0xc9, 0xd4,
	0x0f, 0x29, 0x26, 0x82, 0x91, 0x1a, 0xd2, 0x20, 0x8f, 0x00, 0xfd, 0x2d, 0x6e, 0x83, 0x29, 0xc3,
	0x32, 0x88, 0xa1, 0x36, 0x2b, 0xba, 0xa3, 0x5a, 0x24, 0x3b, 0xb2, 0x92, 0x59, 0x9d, 0xd8, 0xc8,
	0x15, 0xf9, 0x33, 0xce, 0x7d, 0x9f, 0x15, 0xf9, 0xfb, 0xac, 0x78, 0x0d, 0x19, 0xd6, 0xd6, 0xf8,
	0xfd, 0x4e, 0x61, 0xe8, 0xbb, 0x27, 0xf7, 0xd6, 0x04, 0x65, 0x92, 0x77, 0xbd, 0xe9, 0xf6, 0x14,
	0x37, 0xc1, 0x69, 0xdb, 0x41, 0x36, 0xc2, 0xd0, 0xe1, 0x81, 0xc8, 0x3e, 0xfc, 0xfe, 0xa5, 0x79,
	0x3e, 0x10, 0xd7, 0x69, 0x8f, 0x38, 0x2e, 0x3f, 0x1f, 0x59, 0x2e, 0x06, 0x75, 0xf3, 0xcd, 0xbd,
	0xef, 0x1d, 0x4e, 0x5e, 0x7e, 0x2d, 0x70, 0xf9, 0xe7, 0x36, 0x4f, 0x2d, 0x71, 0x19, 0x00, 0xc2,
	0x4c, 0xde, 0x86, 0x1d, 0x51, 0xc6, 0xb9, 0x65, 0x5b, 0x93, 0x7f, 0x16, 0xc0, 0xe9, 0x1d, 0xac,
	0xb3, 0xd5, 0x6e, 0xf4, 0x62, 0xb7, 0xce, 0x3c, 0xed, 0x14, 0x02, 0x56, 0x46, 0xb2, 0x3b, 0x80,
	0xb8, 0x01, 0x4e, 0x51, 0x91, 0x90, 0xc3, 0xcf, 0x6d, 0x32, 0x41, 0x0f, 0x28, 0xbe, 0x01, 0xc6,
	0x54, 0xd3, 0x25, 0x92, 0xcd, 0x1c, 0x41, 0x59, 0xde, 0xa7, 0xfc, 0x5c, 0x50, 0x1d, 0x6f, 0x4c,
	0x57, 0x9c, 0x49, 0x2e, 0x0e, 0x25, 0x23, 0x8b, 0x74, 0x97, 0xd0, 0xdf, 0xfe, 0xd6, 0xf9, 0x62,
	0x98, 0x96, 0x26, 0x76, 0xff, 0xda, 0x75, 0x37, 0x3d, 0xbd, 0xf4, 0x0c, 0xc2, 0xfb, 0x12, 0x18,
	0xb3, 0x1d, 0xd4, 0x86, 0xe9, 0xb4, 0x39, 0xce, 0x8d, 0x04, 0x3b, 0x7a, 0xdd, 0x8b, 0x31, 0xbd,
	0x6f, 0xf3, 0x45, 0xbc, 0x09, 0x4e, 0x69, 0xd0, 0x46, 0xd8, 0x38, 0xda, 0x7e, 0xf3, 0x3a, 0x85,
	0x37, 0x0d, 0x9f, 0x33, 0x58, 0xd7, 0x22, 0xa4, 0x79, 0x5d, 0x8b, 0x58, 0x7d, 0xa5, 0x7e, 0x10,
	0xc0, 0x7c, 0xd8, 0xfd, 0x16, 0x4b, 0x4e, 0x17, 0xe9, 0x8e, 0x46, 0xf5, 0x6e, 0xfa, 0x9b, 0x7b,
	0xda, 0x29, 0xf8, 0x36, 0xbe, 0x28, 0xda, 0x1c, 0x48, 0xa5, 0x84, 0xa4, 0x58, 0xbe, 0x94, 0x40,
	0x2f, 0xdb, 0x4b, 0x8f, 0xad, 0x54, 0xce, 0x83, 0x73, 0x71, 0x0c, 0x7c, 0x8a, 0xbf, 0x0a, 0x51,
	0x05, 0x3e, 0x80, 0x8e, 0x51, 0x37, 0x6a, 0x2a, 0xcd, 0x0c, 0xb9, 0x28, 0xd1, 0x2e, 0xab, 0xcb,
	0x60, 0x0c, 0x13, 0x95, 0xb4, 0x58, 0xa9, 0x9a, 0xde, 0x58, 0xee, 0xbd, 0xd4, 0xd2, 0xf1, 0xf6,
	0x28, 0x48, 0xe1, 0x60, 0xf7, 0xa8, 0xd4, 0x1a, 0xb0, 0x76, 0x0b, 0x3a, 0xfc, 0x4a, 0x7d, 0xc8,
	0x51, 0xe1, 0xc0, 0x70, 0x0a, 0xf5, 0xac, 0x2e, 0xef, 0x7c, 0x2f, 0xef, 0xe0, 0xf2, 0xe5, 0xf3,
	0x40, 0x4e, 0x26, 0xe7, 0x6b, 0x70, 0x9b, 0xd6, 0xb8, 0x0f, 0x0d, 0xd2, 0xd0, 0x1c, 0xf5, 0xb6,
	0x02, 0x6f, 0xab, 0x0e, 0x3d, 0xd2, 0x5e, 0xd6, 0x17, 0xd2, 0xd6, 0xc9, 0x81, 0xe1, 0xdd, 0x77,
	0x2a, 0x26, 0xc3, 0x87, 0xe7, 0xe0, 0x19, 0x3e, 0x6c, 0xf4, 0x56, 0xb5, 0x71, 0x77, 0x0a, 0x64,
	0x76, 0xb0, 0x2e, 0x56, 0xc0, 0x54, 0xf8, 0xd3, 0x95, 0xdc, 0x2b, 0x74, 0xf4, 0xab, 0x87, 0xb4,
	0x96, 0x8e, 0xf1, 0x93, 0xe3, 0x47, 0x60, 0x22, 0xf8, 0x91, 0x68, 0x25, 0xb6, 0x6b, 0x00, 0x21,
	0xad, 0xa6, 0x21, 0xfc, 0xa1, 0x21, 0x98, 0x89, 0x7e, 0x56, 0x39, 0x1f, 0xdb, 0x39, 0x82, 0x92,
	0x2e, 0xf6, 0x83, 0xf2, 0xa7, 0xf9, 0x04, 0x4c, 0x86, 0x3e, 0x68, 0xfc, 0x2f, 0x9e, 0x7d, 0x00,
	0x22, 0x5d, 0x48, 0x85, 0xf8, 0xa3, 0x57, 0xc0, 0x54, 0xf8, 0x53, 0x42, 0x7c, 0x00, 0x42, 0x98,
	0x84, 0x00, 0xc4, 0xbe, 0x79, 0xbd, 0x00, 0x78, 0xc3, 0x27, 0x07, 0xc0, 0x1b, 0x7c, 0x35, 0x0d,
	0x11, 0x17, 0x00, 0x6f, 0xf8, 0xc3, 0x03, 0xe0, 0x4d, 0x71, 0xb1, 0x1f, 0x94, 0x3f, 0x4d, 0x15,
	0x4c, 0x47, 0x5e, 0x7d, 0xff, 0x8f, 0xd7, 0x37, 0x04, 0x92, 0x5e, 0xec, 0x03, 0xe4, 0xcf, 0x61,
	0x01, 0x31, 0xe6, 0x81, 0xf1, 0x42, 0x1f, 0x43, 0xb8, 0x40, 0xa9, 0xd4, 0x27, 0xb0, 0x67, 0x53,
	0x79, 0x8c, 0x0e, 0xd9, 0x54, 0x1e, 0x9f, 0x0b, 0xa9, 0x90, 0xa0, 0x62, 0x91, 0x4b, 0x75, 0xbc,
	0x62, 0x61, 0x50, 0x82, 0x62, 0xf1, 0x77, 0xc4, 0x6e, 0xe6, 0xf0, 0xee, 0x87, 0x87, 0x65, 0x0e,
	0x8e, 0x39, 0x34, 0x73, 0x44, 0xaf, 0x55, 0x10, 0xcc, 0x44, 0x6f, 0x11, 0xe7, 0x0f, 0xd9, 0xf7,
	0x3e, 0x2a, 0x61, 0x77, 0x25, 0x94, 0x61, 0xf1, 0x16, 0x98, 0xeb, 0x2d, 0xc1, 0xcf, 0xa7, 0x0d,
	0xc1, 0x70, 0x52, 0xb1, 0x3f, 0x9c, 0x3f, 0xd9, 0xa7, 0x60, 0x29, 0xa9, 0x18, 0xa6, 0xae, 0x3a,
	0x88, 0x96, 0x36, 0x8f, 0x82, 0xf6, 0xa7, 0xbf, 0x09, 0x46, 0xd9, 0x35, 0x54, 0x8a, 0xed, 0x4e,
	0x7d, 0x92, 0x9c, 0xec, 0x0b, 0x6e, 0xb0, 0x48, 0x45, 0x8b, 0xdf, 0x60, 0x61, 0x50, 0xc2, 0x06,
	0x8b, 0x2f, 0x51, 0x5b, 0xef, 0xdc, 0x7f, 0x94, 0x17, 0x1e, 0x3c, 0xca, 0x0b, 0xbf, 0x3d, 0xca,
	0x0b, 0x5f, 0x3f, 0xce, 0x0f, 0x3d, 0x78, 0x9c, 0x1f, 0xfa, 0xe5, 0x71, 0x7e, 0xe8, 0xe3, 0x75,
	0xdd, 0x20, 0x8d, 0x56, 0xb5, 0x58, 0x43, 0x66, 0x89, 0x0d, 0x58, 0x47, 0x2d, 0x4b, 0xa3, 0x5c,
	0xb9, 0xa1, 0x74, 0xc7, 0xfb, 0x87, 0x0d, 0xd9, 0xb7, 0x21, 0xae, 0x8e, 0xd1, 0xff, 0xd6, 0xbc,
	0xfc, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x8e, 0x7c, 0x74, 0xb4, 0x1a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateProgram defines a method for creating a new program.
	CreateProgram(ctx context.Context, in *MsgCreateProgram, opts ...grpc.CallOption) (*MsgCreateProgramResponse, error)
	// EditProgram defines a method for modifying a program.
	EditProgram(ctx context.Context, in *MsgEditProgram, opts ...grpc.CallOption) (*MsgEditProgramResponse, error)
	// Activate a program status by program_id
	ActivateProgram(ctx context.Context, in *MsgActivateProgram, opts ...grpc.CallOption) (*MsgActivateProgramResponse, error)
	// Closed a program status by program_id
	CloseProgram(ctx context.Context, in *MsgCloseProgram, opts ...grpc.CallOption) (*MsgCloseProgramResponse, error)
	// SubmitFinding defines a method for submitting a new finding.
	SubmitFinding(ctx context.Context, in *MsgSubmitFinding, opts ...grpc.CallOption) (*MsgSubmitFindingResponse, error)
	// EditFinding defines a method for editing a new finding.
	EditFinding(ctx context.Context, in *MsgEditFinding, opts ...grpc.CallOption) (*MsgEditFindingResponse, error)
	// ActivateFinding defines a method for activate a new finding.
	ActivateFinding(ctx context.Context, in *MsgActivateFinding, opts ...grpc.CallOption) (*MsgActivateFindingResponse, error)
	// ConfirmFinding defines a method for host confirm a finding.
	ConfirmFinding(ctx context.Context, in *MsgConfirmFinding, opts ...grpc.CallOption) (*MsgConfirmFindingResponse, error)
	// ConfirmFindingPaid defines a method for submitter confirm a finding paid
	ConfirmFindingPaid(ctx context.Context, in *MsgConfirmFindingPaid, opts ...grpc.CallOption) (*MsgConfirmFindingPaidResponse, error)
	// CloseFinding defines a method for submitter or certifier close a finding
	CloseFinding(ctx context.Context, in *MsgCloseFinding, opts ...grpc.CallOption) (*MsgCloseFindingResponse, error)
	// PublishFinding defines a method for publish a finding.
	PublishFinding(ctx context.Context, in *MsgPublishFinding, opts ...grpc.CallOption) (*MsgPublishFindingResponse, error)
	// CreateTheorem defines a method to create new theorem given the messages.
	CreateTheorem(ctx context.Context, in *MsgCreateTheorem, opts ...grpc.CallOption) (*MsgCreateTheoremResponse, error)
	// SubmitProofHash defines a method to submit a proof with hash.
	SubmitProofHash(ctx context.Context, in *MsgSubmitProofHash, opts ...grpc.CallOption) (*MsgSubmitProofHashResponse, error)
	// SubmitProofDetail defines a method to submit a proof with detail.
	SubmitProofDetail(ctx context.Context, in *MsgSubmitProofDetail, opts ...grpc.CallOption) (*MsgSubmitProofDetailResponse, error)
	// SubmitProofVerification defines a method to submit a proof result.
	SubmitProofVerification(ctx context.Context, in *MsgSubmitProofVerification, opts ...grpc.CallOption) (*MsgSubmitProofVerificationResponse, error)
	// Grant defines a method to grant theorem given the messages.
	Grant(ctx context.Context, in *MsgGrant, opts ...grpc.CallOption) (*MsgGrantResponse, error)
	// WithdrawReward defines a method to withdraw reward given the messages.
	WithdrawReward(ctx context.Context, in *MsgWithdrawReward, opts ...grpc.CallOption) (*MsgWithdrawRewardResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateProgram(ctx context.Context, in *MsgCreateProgram, opts ...grpc.CallOption) (*MsgCreateProgramResponse, error) {
	out := new(MsgCreateProgramResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/CreateProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditProgram(ctx context.Context, in *MsgEditProgram, opts ...grpc.CallOption) (*MsgEditProgramResponse, error) {
	out := new(MsgEditProgramResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/EditProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ActivateProgram(ctx context.Context, in *MsgActivateProgram, opts ...grpc.CallOption) (*MsgActivateProgramResponse, error) {
	out := new(MsgActivateProgramResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/ActivateProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CloseProgram(ctx context.Context, in *MsgCloseProgram, opts ...grpc.CallOption) (*MsgCloseProgramResponse, error) {
	out := new(MsgCloseProgramResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/CloseProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitFinding(ctx context.Context, in *MsgSubmitFinding, opts ...grpc.CallOption) (*MsgSubmitFindingResponse, error) {
	out := new(MsgSubmitFindingResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/SubmitFinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditFinding(ctx context.Context, in *MsgEditFinding, opts ...grpc.CallOption) (*MsgEditFindingResponse, error) {
	out := new(MsgEditFindingResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/EditFinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ActivateFinding(ctx context.Context, in *MsgActivateFinding, opts ...grpc.CallOption) (*MsgActivateFindingResponse, error) {
	out := new(MsgActivateFindingResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/ActivateFinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmFinding(ctx context.Context, in *MsgConfirmFinding, opts ...grpc.CallOption) (*MsgConfirmFindingResponse, error) {
	out := new(MsgConfirmFindingResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/ConfirmFinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmFindingPaid(ctx context.Context, in *MsgConfirmFindingPaid, opts ...grpc.CallOption) (*MsgConfirmFindingPaidResponse, error) {
	out := new(MsgConfirmFindingPaidResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/ConfirmFindingPaid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CloseFinding(ctx context.Context, in *MsgCloseFinding, opts ...grpc.CallOption) (*MsgCloseFindingResponse, error) {
	out := new(MsgCloseFindingResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/CloseFinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PublishFinding(ctx context.Context, in *MsgPublishFinding, opts ...grpc.CallOption) (*MsgPublishFindingResponse, error) {
	out := new(MsgPublishFindingResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/PublishFinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTheorem(ctx context.Context, in *MsgCreateTheorem, opts ...grpc.CallOption) (*MsgCreateTheoremResponse, error) {
	out := new(MsgCreateTheoremResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/CreateTheorem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitProofHash(ctx context.Context, in *MsgSubmitProofHash, opts ...grpc.CallOption) (*MsgSubmitProofHashResponse, error) {
	out := new(MsgSubmitProofHashResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/SubmitProofHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitProofDetail(ctx context.Context, in *MsgSubmitProofDetail, opts ...grpc.CallOption) (*MsgSubmitProofDetailResponse, error) {
	out := new(MsgSubmitProofDetailResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/SubmitProofDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitProofVerification(ctx context.Context, in *MsgSubmitProofVerification, opts ...grpc.CallOption) (*MsgSubmitProofVerificationResponse, error) {
	out := new(MsgSubmitProofVerificationResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/SubmitProofVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Grant(ctx context.Context, in *MsgGrant, opts ...grpc.CallOption) (*MsgGrantResponse, error) {
	out := new(MsgGrantResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/Grant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawReward(ctx context.Context, in *MsgWithdrawReward, opts ...grpc.CallOption) (*MsgWithdrawRewardResponse, error) {
	out := new(MsgWithdrawRewardResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/WithdrawReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateProgram defines a method for creating a new program.
	CreateProgram(context.Context, *MsgCreateProgram) (*MsgCreateProgramResponse, error)
	// EditProgram defines a method for modifying a program.
	EditProgram(context.Context, *MsgEditProgram) (*MsgEditProgramResponse, error)
	// Activate a program status by program_id
	ActivateProgram(context.Context, *MsgActivateProgram) (*MsgActivateProgramResponse, error)
	// Closed a program status by program_id
	CloseProgram(context.Context, *MsgCloseProgram) (*MsgCloseProgramResponse, error)
	// SubmitFinding defines a method for submitting a new finding.
	SubmitFinding(context.Context, *MsgSubmitFinding) (*MsgSubmitFindingResponse, error)
	// EditFinding defines a method for editing a new finding.
	EditFinding(context.Context, *MsgEditFinding) (*MsgEditFindingResponse, error)
	// ActivateFinding defines a method for activate a new finding.
	ActivateFinding(context.Context, *MsgActivateFinding) (*MsgActivateFindingResponse, error)
	// ConfirmFinding defines a method for host confirm a finding.
	ConfirmFinding(context.Context, *MsgConfirmFinding) (*MsgConfirmFindingResponse, error)
	// ConfirmFindingPaid defines a method for submitter confirm a finding paid
	ConfirmFindingPaid(context.Context, *MsgConfirmFindingPaid) (*MsgConfirmFindingPaidResponse, error)
	// CloseFinding defines a method for submitter or certifier close a finding
	CloseFinding(context.Context, *MsgCloseFinding) (*MsgCloseFindingResponse, error)
	// PublishFinding defines a method for publish a finding.
	PublishFinding(context.Context, *MsgPublishFinding) (*MsgPublishFindingResponse, error)
	// CreateTheorem defines a method to create new theorem given the messages.
	CreateTheorem(context.Context, *MsgCreateTheorem) (*MsgCreateTheoremResponse, error)
	// SubmitProofHash defines a method to submit a proof with hash.
	SubmitProofHash(context.Context, *MsgSubmitProofHash) (*MsgSubmitProofHashResponse, error)
	// SubmitProofDetail defines a method to submit a proof with detail.
	SubmitProofDetail(context.Context, *MsgSubmitProofDetail) (*MsgSubmitProofDetailResponse, error)
	// SubmitProofVerification defines a method to submit a proof result.
	SubmitProofVerification(context.Context, *MsgSubmitProofVerification) (*MsgSubmitProofVerificationResponse, error)
	// Grant defines a method to grant theorem given the messages.
	Grant(context.Context, *MsgGrant) (*MsgGrantResponse, error)
	// WithdrawReward defines a method to withdraw reward given the messages.
	WithdrawReward(context.Context, *MsgWithdrawReward) (*MsgWithdrawRewardResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateProgram(ctx context.Context, req *MsgCreateProgram) (*MsgCreateProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgram not implemented")
}
func (*UnimplementedMsgServer) EditProgram(ctx context.Context, req *MsgEditProgram) (*MsgEditProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditProgram not implemented")
}
func (*UnimplementedMsgServer) ActivateProgram(ctx context.Context, req *MsgActivateProgram) (*MsgActivateProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateProgram not implemented")
}
func (*UnimplementedMsgServer) CloseProgram(ctx context.Context, req *MsgCloseProgram) (*MsgCloseProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseProgram not implemented")
}
func (*UnimplementedMsgServer) SubmitFinding(ctx context.Context, req *MsgSubmitFinding) (*MsgSubmitFindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFinding not implemented")
}
func (*UnimplementedMsgServer) EditFinding(ctx context.Context, req *MsgEditFinding) (*MsgEditFindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditFinding not implemented")
}
func (*UnimplementedMsgServer) ActivateFinding(ctx context.Context, req *MsgActivateFinding) (*MsgActivateFindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateFinding not implemented")
}
func (*UnimplementedMsgServer) ConfirmFinding(ctx context.Context, req *MsgConfirmFinding) (*MsgConfirmFindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmFinding not implemented")
}
func (*UnimplementedMsgServer) ConfirmFindingPaid(ctx context.Context, req *MsgConfirmFindingPaid) (*MsgConfirmFindingPaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmFindingPaid not implemented")
}
func (*UnimplementedMsgServer) CloseFinding(ctx context.Context, req *MsgCloseFinding) (*MsgCloseFindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseFinding not implemented")
}
func (*UnimplementedMsgServer) PublishFinding(ctx context.Context, req *MsgPublishFinding) (*MsgPublishFindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishFinding not implemented")
}
func (*UnimplementedMsgServer) CreateTheorem(ctx context.Context, req *MsgCreateTheorem) (*MsgCreateTheoremResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTheorem not implemented")
}
func (*UnimplementedMsgServer) SubmitProofHash(ctx context.Context, req *MsgSubmitProofHash) (*MsgSubmitProofHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProofHash not implemented")
}
func (*UnimplementedMsgServer) SubmitProofDetail(ctx context.Context, req *MsgSubmitProofDetail) (*MsgSubmitProofDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProofDetail not implemented")
}
func (*UnimplementedMsgServer) SubmitProofVerification(ctx context.Context, req *MsgSubmitProofVerification) (*MsgSubmitProofVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProofVerification not implemented")
}
func (*UnimplementedMsgServer) Grant(ctx context.Context, req *MsgGrant) (*MsgGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grant not implemented")
}
func (*UnimplementedMsgServer) WithdrawReward(ctx context.Context, req *MsgWithdrawReward) (*MsgWithdrawRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawReward not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateProgram)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/CreateProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateProgram(ctx, req.(*MsgCreateProgram))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditProgram)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/EditProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditProgram(ctx, req.(*MsgEditProgram))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ActivateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgActivateProgram)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ActivateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/ActivateProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ActivateProgram(ctx, req.(*MsgActivateProgram))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CloseProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCloseProgram)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CloseProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/CloseProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CloseProgram(ctx, req.(*MsgCloseProgram))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitFinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitFinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitFinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/SubmitFinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitFinding(ctx, req.(*MsgSubmitFinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditFinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditFinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditFinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/EditFinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditFinding(ctx, req.(*MsgEditFinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ActivateFinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgActivateFinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ActivateFinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/ActivateFinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ActivateFinding(ctx, req.(*MsgActivateFinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmFinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmFinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmFinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/ConfirmFinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmFinding(ctx, req.(*MsgConfirmFinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmFindingPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmFindingPaid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmFindingPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/ConfirmFindingPaid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmFindingPaid(ctx, req.(*MsgConfirmFindingPaid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CloseFinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCloseFinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CloseFinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/CloseFinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CloseFinding(ctx, req.(*MsgCloseFinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PublishFinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPublishFinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PublishFinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/PublishFinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PublishFinding(ctx, req.(*MsgPublishFinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTheorem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTheorem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTheorem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/CreateTheorem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTheorem(ctx, req.(*MsgCreateTheorem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitProofHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitProofHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitProofHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/SubmitProofHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitProofHash(ctx, req.(*MsgSubmitProofHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitProofDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitProofDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitProofDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/SubmitProofDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitProofDetail(ctx, req.(*MsgSubmitProofDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitProofVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitProofVerification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitProofVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/SubmitProofVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitProofVerification(ctx, req.(*MsgSubmitProofVerification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Grant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGrant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Grant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/Grant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Grant(ctx, req.(*MsgGrant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/WithdrawReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawReward(ctx, req.(*MsgWithdrawReward))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shentu.bounty.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProgram",
			Handler:    _Msg_CreateProgram_Handler,
		},
		{
			MethodName: "EditProgram",
			Handler:    _Msg_EditProgram_Handler,
		},
		{
			MethodName: "ActivateProgram",
			Handler:    _Msg_ActivateProgram_Handler,
		},
		{
			MethodName: "CloseProgram",
			Handler:    _Msg_CloseProgram_Handler,
		},
		{
			MethodName: "SubmitFinding",
			Handler:    _Msg_SubmitFinding_Handler,
		},
		{
			MethodName: "EditFinding",
			Handler:    _Msg_EditFinding_Handler,
		},
		{
			MethodName: "ActivateFinding",
			Handler:    _Msg_ActivateFinding_Handler,
		},
		{
			MethodName: "ConfirmFinding",
			Handler:    _Msg_ConfirmFinding_Handler,
		},
		{
			MethodName: "ConfirmFindingPaid",
			Handler:    _Msg_ConfirmFindingPaid_Handler,
		},
		{
			MethodName: "CloseFinding",
			Handler:    _Msg_CloseFinding_Handler,
		},
		{
			MethodName: "PublishFinding",
			Handler:    _Msg_PublishFinding_Handler,
		},
		{
			MethodName: "CreateTheorem",
			Handler:    _Msg_CreateTheorem_Handler,
		},
		{
			MethodName: "SubmitProofHash",
			Handler:    _Msg_SubmitProofHash_Handler,
		},
		{
			MethodName: "SubmitProofDetail",
			Handler:    _Msg_SubmitProofDetail_Handler,
		},
		{
			MethodName: "SubmitProofVerification",
			Handler:    _Msg_SubmitProofVerification_Handler,
		},
		{
			MethodName: "Grant",
			Handler:    _Msg_Grant_Handler,
		},
		{
			MethodName: "WithdrawReward",
			Handler:    _Msg_WithdrawReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shentu/bounty/v1/tx.proto",
}

func (m *MsgCreateProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEditProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgActivateProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgActivateProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgActivateProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgActivateProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgActivateProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgActivateProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCloseProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCloseProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCloseProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCloseProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCloseProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCloseProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitFinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitFinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitFinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeverityLevel != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SeverityLevel))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FindingHash) > 0 {
		i -= len(m.FindingHash)
		copy(dAtA[i:], m.FindingHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FindingHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FindingId) > 0 {
		i -= len(m.FindingId)
		copy(dAtA[i:], m.FindingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FindingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitFindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitFindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitFindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEditFinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditFinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditFinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentHash) > 0 {
		i -= len(m.PaymentHash)
		copy(dAtA[i:], m.PaymentHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PaymentHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SeverityLevel != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SeverityLevel))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FindingHash) > 0 {
		i -= len(m.FindingHash)
		copy(dAtA[i:], m.FindingHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FindingHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FindingId) > 0 {
		i -= len(m.FindingId)
		copy(dAtA[i:], m.FindingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FindingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditFindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditFindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditFindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConfirmFinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmFinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmFinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fingerprint) > 0 {
		i -= len(m.Fingerprint)
		copy(dAtA[i:], m.Fingerprint)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Fingerprint)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FindingId) > 0 {
		i -= len(m.FindingId)
		copy(dAtA[i:], m.FindingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FindingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfirmFindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmFindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmFindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgActivateFinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgActivateFinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgActivateFinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FindingId) > 0 {
		i -= len(m.FindingId)
		copy(dAtA[i:], m.FindingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FindingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgActivateFindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgActivateFindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgActivateFindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConfirmFindingPaid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmFindingPaid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmFindingPaid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FindingId) > 0 {
		i -= len(m.FindingId)
		copy(dAtA[i:], m.FindingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FindingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfirmFindingPaidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmFindingPaidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmFindingPaidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCloseFinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCloseFinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCloseFinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FindingId) > 0 {
		i -= len(m.FindingId)
		copy(dAtA[i:], m.FindingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FindingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCloseFindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCloseFindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCloseFindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPublishFinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPublishFinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPublishFinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProofOfConcept) > 0 {
		i -= len(m.ProofOfConcept)
		copy(dAtA[i:], m.ProofOfConcept)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofOfConcept)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FindingId) > 0 {
		i -= len(m.FindingId)
		copy(dAtA[i:], m.FindingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FindingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPublishFindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPublishFindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPublishFindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateTheorem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTheorem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTheorem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InitialGrant) > 0 {
		for iNdEx := len(m.InitialGrant) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InitialGrant[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTheoremResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTheoremResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTheoremResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TheoremId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TheoremId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgGrant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGrant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGrant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Grantor) > 0 {
		i -= len(m.Grantor)
		copy(dAtA[i:], m.Grantor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Grantor)))
		i--
		dAtA[i] = 0x12
	}
	if m.TheoremId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TheoremId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgGrantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGrantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGrantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitProofHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitProofHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitProofHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposit) > 0 {
		for iNdEx := len(m.Deposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ProofHash) > 0 {
		i -= len(m.ProofHash)
		copy(dAtA[i:], m.ProofHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prover) > 0 {
		i -= len(m.Prover)
		copy(dAtA[i:], m.Prover)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Prover)))
		i--
		dAtA[i] = 0x12
	}
	if m.TheoremId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TheoremId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitProofHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitProofHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitProofHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitProofDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitProofDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitProofDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prover) > 0 {
		i -= len(m.Prover)
		copy(dAtA[i:], m.Prover)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Prover)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProofId) > 0 {
		i -= len(m.ProofId)
		copy(dAtA[i:], m.ProofId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitProofDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitProofDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitProofDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitProofVerification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitProofVerification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitProofVerification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Checker) > 0 {
		i -= len(m.Checker)
		copy(dAtA[i:], m.Checker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Checker)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProofId) > 0 {
		i -= len(m.ProofId)
		copy(dAtA[i:], m.ProofId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitProofVerificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitProofVerificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitProofVerificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEditProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEditProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgActivateProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgActivateProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCloseProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCloseProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitFinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FindingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FindingHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SeverityLevel != 0 {
		n += 1 + sovTx(uint64(m.SeverityLevel))
	}
	return n
}

func (m *MsgSubmitFindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEditFinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FindingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FindingHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SeverityLevel != 0 {
		n += 1 + sovTx(uint64(m.SeverityLevel))
	}
	l = len(m.PaymentHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEditFindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConfirmFinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FindingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Fingerprint)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConfirmFindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgActivateFinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FindingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgActivateFindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConfirmFindingPaid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FindingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConfirmFindingPaidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCloseFinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FindingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCloseFindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPublishFinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FindingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofOfConcept)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPublishFindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateTheorem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.InitialGrant) > 0 {
		for _, e := range m.InitialGrant {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateTheoremResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TheoremId != 0 {
		n += 1 + sovTx(uint64(m.TheoremId))
	}
	return n
}

func (m *MsgGrant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TheoremId != 0 {
		n += 1 + sovTx(uint64(m.TheoremId))
	}
	l = len(m.Grantor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgGrantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitProofHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TheoremId != 0 {
		n += 1 + sovTx(uint64(m.TheoremId))
	}
	l = len(m.Prover)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Deposit) > 0 {
		for _, e := range m.Deposit {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitProofHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitProofDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProofId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Prover)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitProofDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitProofVerification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProofId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	l = len(m.Checker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitProofVerificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgActivateProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgActivateProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgActivateProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgActivateProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgActivateProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgActivateProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCloseProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCloseProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCloseProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCloseProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCloseProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCloseProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitFinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitFinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitFinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeverityLevel", wireType)
			}
			m.SeverityLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeverityLevel |= SeverityLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitFindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitFindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitFindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditFinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditFinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditFinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeverityLevel", wireType)
			}
			m.SeverityLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeverityLevel |= SeverityLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditFindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditFindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditFindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmFinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmFinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmFinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fingerprint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fingerprint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmFindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmFindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmFindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgActivateFinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgActivateFinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgActivateFinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgActivateFindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgActivateFindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgActivateFindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmFindingPaid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmFindingPaid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmFindingPaid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmFindingPaidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmFindingPaidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmFindingPaidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCloseFinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCloseFinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCloseFinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCloseFindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCloseFindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCloseFindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPublishFinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPublishFinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPublishFinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofOfConcept", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofOfConcept = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPublishFindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPublishFindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPublishFindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTheorem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTheorem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTheorem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialGrant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialGrant = append(m.InitialGrant, types.Coin{})
			if err := m.InitialGrant[len(m.InitialGrant)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTheoremResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTheoremResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTheoremResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheoremId", wireType)
			}
			m.TheoremId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TheoremId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGrant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGrant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGrant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheoremId", wireType)
			}
			m.TheoremId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TheoremId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGrantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGrantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGrantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitProofHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitProofHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitProofHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheoremId", wireType)
			}
			m.TheoremId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TheoremId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = append(m.Deposit, types.Coin{})
			if err := m.Deposit[len(m.Deposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitProofHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitProofHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitProofHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitProofDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitProofDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitProofDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitProofDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitProofDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitProofDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitProofVerification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitProofVerification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitProofVerification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProofStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitProofVerificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitProofVerificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitProofVerificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
