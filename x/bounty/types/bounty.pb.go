// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/bounty/v1/bounty.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProgramStatus int32

const (
	ProgramStatusInactive ProgramStatus = 0
	ProgramStatusActive   ProgramStatus = 1
	ProgramStatusClosed   ProgramStatus = 2
)

var ProgramStatus_name = map[int32]string{
	0: "PROGRAM_STATUS_INACTIVE",
	1: "PROGRAM_STATUS_ACTIVE",
	2: "PROGRAM_STATUS_CLOSED",
}

var ProgramStatus_value = map[string]int32{
	"PROGRAM_STATUS_INACTIVE": 0,
	"PROGRAM_STATUS_ACTIVE":   1,
	"PROGRAM_STATUS_CLOSED":   2,
}

func (x ProgramStatus) String() string {
	return proto.EnumName(ProgramStatus_name, int32(x))
}

func (ProgramStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{0}
}

type SeverityLevel int32

const (
	Unspecified   SeverityLevel = 0
	Critical      SeverityLevel = 1
	High          SeverityLevel = 2
	Medium        SeverityLevel = 3
	Low           SeverityLevel = 4
	Informational SeverityLevel = 5
)

var SeverityLevel_name = map[int32]string{
	0: "SEVERITY_LEVEL_UNSPECIFIED",
	1: "SEVERITY_LEVEL_CRITICAL",
	2: "SEVERITY_LEVEL_HIGH",
	3: "SEVERITY_LEVEL_MEDIUM",
	4: "SEVERITY_LEVEL_LOW",
	5: "SEVERITY_LEVEL_INFORMATIONAL",
}

var SeverityLevel_value = map[string]int32{
	"SEVERITY_LEVEL_UNSPECIFIED":   0,
	"SEVERITY_LEVEL_CRITICAL":      1,
	"SEVERITY_LEVEL_HIGH":          2,
	"SEVERITY_LEVEL_MEDIUM":        3,
	"SEVERITY_LEVEL_LOW":           4,
	"SEVERITY_LEVEL_INFORMATIONAL": 5,
}

func (x SeverityLevel) String() string {
	return proto.EnumName(SeverityLevel_name, int32(x))
}

func (SeverityLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{1}
}

type FindingStatus int32

const (
	FindingStatusSubmitted FindingStatus = 0
	FindingStatusActive    FindingStatus = 1
	FindingStatusConfirmed FindingStatus = 2
	FindingStatusPaid      FindingStatus = 3
	FindingStatusClosed    FindingStatus = 4
)

var FindingStatus_name = map[int32]string{
	0: "FINDING_STATUS_SUBMITTED",
	1: "FINDING_STATUS_ACTIVE",
	2: "FINDING_STATUS_CONFIRMED",
	3: "FINDING_STATUS_PAID",
	4: "FINDING_STATUS_CLOSED",
}

var FindingStatus_value = map[string]int32{
	"FINDING_STATUS_SUBMITTED": 0,
	"FINDING_STATUS_ACTIVE":    1,
	"FINDING_STATUS_CONFIRMED": 2,
	"FINDING_STATUS_PAID":      3,
	"FINDING_STATUS_CLOSED":    4,
}

func (x FindingStatus) String() string {
	return proto.EnumName(FindingStatus_name, int32(x))
}

func (FindingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{2}
}

type TheoremStatus int32

const (
	// default theorem status.
	TheoremStatus_THEOREM_STATUS_UNSPECIFIED TheoremStatus = 0
	// theorem status during the proof period.
	TheoremStatus_THEOREM_STATUS_PROOF_PERIOD TheoremStatus = 1
	// theorem that has passed.
	TheoremStatus_THEOREM_STATUS_PASSED TheoremStatus = 2
	// theorem that has closed.
	TheoremStatus_THEOREM_STATUS_CLOSED TheoremStatus = 3
)

var TheoremStatus_name = map[int32]string{
	0: "THEOREM_STATUS_UNSPECIFIED",
	1: "THEOREM_STATUS_PROOF_PERIOD",
	2: "THEOREM_STATUS_PASSED",
	3: "THEOREM_STATUS_CLOSED",
}

var TheoremStatus_value = map[string]int32{
	"THEOREM_STATUS_UNSPECIFIED":  0,
	"THEOREM_STATUS_PROOF_PERIOD": 1,
	"THEOREM_STATUS_PASSED":       2,
	"THEOREM_STATUS_CLOSED":       3,
}

func (x TheoremStatus) String() string {
	return proto.EnumName(TheoremStatus_name, int32(x))
}

func (TheoremStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{3}
}

type ProofStatus int32

const (
	// default proof status.
	ProofStatus_PROOF_STATUS_UNSPECIFIED ProofStatus = 0
	// proof status during the creation period.
	ProofStatus_PROOF_STATUS_HASH_LOCK_PERIOD ProofStatus = 1
	// proof status during the upload proof detail period timeout.
	ProofStatus_PROOF_STATUS_HASH_DETAIL_TIMEOUT ProofStatus = 2
	// proof status during the upload proof detail period.
	ProofStatus_PROOF_STATUS_HASH_DETAIL_PERIOD ProofStatus = 3
	// theorem that has passed.
	ProofStatus_PROOF_STATUS_PASSED ProofStatus = 4
	// theorem that has failed.
	ProofStatus_PROOF_STATUS_FAILED ProofStatus = 5
	// theorem that checker has timeout.
	ProofStatus_PROOF_STATUS_CHECKER_TIMEOUT ProofStatus = 6
)

var ProofStatus_name = map[int32]string{
	0: "PROOF_STATUS_UNSPECIFIED",
	1: "PROOF_STATUS_HASH_LOCK_PERIOD",
	2: "PROOF_STATUS_HASH_DETAIL_TIMEOUT",
	3: "PROOF_STATUS_HASH_DETAIL_PERIOD",
	4: "PROOF_STATUS_PASSED",
	5: "PROOF_STATUS_FAILED",
	6: "PROOF_STATUS_CHECKER_TIMEOUT",
}

var ProofStatus_value = map[string]int32{
	"PROOF_STATUS_UNSPECIFIED":         0,
	"PROOF_STATUS_HASH_LOCK_PERIOD":    1,
	"PROOF_STATUS_HASH_DETAIL_TIMEOUT": 2,
	"PROOF_STATUS_HASH_DETAIL_PERIOD":  3,
	"PROOF_STATUS_PASSED":              4,
	"PROOF_STATUS_FAILED":              5,
	"PROOF_STATUS_CHECKER_TIMEOUT":     6,
}

func (x ProofStatus) String() string {
	return proto.EnumName(ProofStatus_name, int32(x))
}

func (ProofStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{4}
}

type Program struct {
	ProgramId string `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty" yaml:"program_id"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	// JSON by ProgramDetail
	Detail       string        `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty" yaml:"detail"`
	AdminAddress string        `protobuf:"bytes,4,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty" yaml:"admin_address"`
	Status       ProgramStatus `protobuf:"varint,5,opt,name=status,proto3,enum=shentu.bounty.v1.ProgramStatus" json:"status,omitempty" yaml:"status"`
	CreateTime   time.Time     `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3,stdtime" json:"create_time" yaml:"create_time"`
}

func (m *Program) Reset()         { *m = Program{} }
func (m *Program) String() string { return proto.CompactTextString(m) }
func (*Program) ProtoMessage()    {}
func (*Program) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{0}
}
func (m *Program) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Program) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Program.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Program) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Program.Merge(m, src)
}
func (m *Program) XXX_Size() int {
	return m.Size()
}
func (m *Program) XXX_DiscardUnknown() {
	xxx_messageInfo_Program.DiscardUnknown(m)
}

var xxx_messageInfo_Program proto.InternalMessageInfo

type Finding struct {
	ProgramId      string `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty" yaml:"program_id"`
	FindingId      string `protobuf:"bytes,2,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty" yaml:"finding_id"`
	Title          string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description    string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	ProofOfConcept string `protobuf:"bytes,5,opt,name=proof_of_concept,json=proofOfConcept,proto3" json:"proof_of_concept,omitempty" yaml:"proof_of_concept"`
	// hash(description + proof_of_concept + submitter)
	FindingHash      string        `protobuf:"bytes,6,opt,name=finding_hash,json=findingHash,proto3" json:"finding_hash,omitempty" yaml:"finding_hash"`
	SubmitterAddress string        `protobuf:"bytes,7,opt,name=submitter_address,json=submitterAddress,proto3" json:"submitter_address,omitempty" yaml:"submitter_address"`
	SeverityLevel    SeverityLevel `protobuf:"varint,8,opt,name=severity_level,json=severityLevel,proto3,enum=shentu.bounty.v1.SeverityLevel" json:"severity_level,omitempty" yaml:"severity_level"`
	Status           FindingStatus `protobuf:"varint,9,opt,name=status,proto3,enum=shentu.bounty.v1.FindingStatus" json:"status,omitempty" yaml:"status"`
	// JSON by FindingDetail
	Detail      string    `protobuf:"bytes,10,opt,name=detail,proto3" json:"detail,omitempty" yaml:"detail"`
	PaymentHash string    `protobuf:"bytes,11,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty" yaml:"payment_hash"`
	CreateTime  time.Time `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3,stdtime" json:"create_time" yaml:"create_time"`
}

func (m *Finding) Reset()         { *m = Finding{} }
func (m *Finding) String() string { return proto.CompactTextString(m) }
func (*Finding) ProtoMessage()    {}
func (*Finding) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{1}
}
func (m *Finding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Finding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Finding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Finding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Finding.Merge(m, src)
}
func (m *Finding) XXX_Size() int {
	return m.Size()
}
func (m *Finding) XXX_DiscardUnknown() {
	xxx_messageInfo_Finding.DiscardUnknown(m)
}

var xxx_messageInfo_Finding proto.InternalMessageInfo

type ProgramFingerprint struct {
	ProgramId string `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"id" yaml:"id"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	// JSON by ProgramDetail
	Detail       string        `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty" yaml:"detail"`
	AdminAddress string        `protobuf:"bytes,4,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty" yaml:"admin_address"`
	Status       ProgramStatus `protobuf:"varint,5,opt,name=status,proto3,enum=shentu.bounty.v1.ProgramStatus" json:"status,omitempty" yaml:"status"`
}

func (m *ProgramFingerprint) Reset()         { *m = ProgramFingerprint{} }
func (m *ProgramFingerprint) String() string { return proto.CompactTextString(m) }
func (*ProgramFingerprint) ProtoMessage()    {}
func (*ProgramFingerprint) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{2}
}
func (m *ProgramFingerprint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProgramFingerprint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProgramFingerprint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProgramFingerprint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProgramFingerprint.Merge(m, src)
}
func (m *ProgramFingerprint) XXX_Size() int {
	return m.Size()
}
func (m *ProgramFingerprint) XXX_DiscardUnknown() {
	xxx_messageInfo_ProgramFingerprint.DiscardUnknown(m)
}

var xxx_messageInfo_ProgramFingerprint proto.InternalMessageInfo

type FindingFingerprint struct {
	ProgramId string `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty" yaml:"program_id"`
	FindingId string `protobuf:"bytes,2,opt,name=finding_id,json=findingId,proto3" json:"id" yaml:"id"`
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// hash(description + proof_of_concept + submitter)
	FindingHash   string        `protobuf:"bytes,4,opt,name=finding_hash,json=findingHash,proto3" json:"finding_hash,omitempty" yaml:"finding_hash"`
	SeverityLevel SeverityLevel `protobuf:"varint,5,opt,name=severity_level,json=severityLevel,proto3,enum=shentu.bounty.v1.SeverityLevel" json:"severity_level,omitempty" yaml:"severity_level"`
	Status        FindingStatus `protobuf:"varint,6,opt,name=status,proto3,enum=shentu.bounty.v1.FindingStatus" json:"status,omitempty" yaml:"status"`
	// JSON by FindingDetail
	Detail      string `protobuf:"bytes,7,opt,name=detail,proto3" json:"detail,omitempty" yaml:"detail"`
	PaymentHash string `protobuf:"bytes,8,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty" yaml:"payment_hash"`
}

func (m *FindingFingerprint) Reset()         { *m = FindingFingerprint{} }
func (m *FindingFingerprint) String() string { return proto.CompactTextString(m) }
func (*FindingFingerprint) ProtoMessage()    {}
func (*FindingFingerprint) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{3}
}
func (m *FindingFingerprint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindingFingerprint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindingFingerprint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindingFingerprint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindingFingerprint.Merge(m, src)
}
func (m *FindingFingerprint) XXX_Size() int {
	return m.Size()
}
func (m *FindingFingerprint) XXX_DiscardUnknown() {
	xxx_messageInfo_FindingFingerprint.DiscardUnknown(m)
}

var xxx_messageInfo_FindingFingerprint proto.InternalMessageInfo

// Theorem defines the core field members of an openmath theorem.
type Theorem struct {
	// id defines the unique id of the theorem.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// title is the title of the theorem
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// description is the description of the theorem
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// code is a summary of the theorem
	Code    string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	ProofId string `protobuf:"bytes,5,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	// status defines the theorem status.
	Status TheoremStatus `protobuf:"varint,6,opt,name=status,proto3,enum=shentu.bounty.v1.TheoremStatus" json:"status,omitempty"`
	// submit_time is the time of theorem submission.
	SubmitTime *time.Time `protobuf:"bytes,7,opt,name=submit_time,json=submitTime,proto3,stdtime" json:"submit_time,omitempty"`
	EndTime    *time.Time `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time,omitempty"`
	// total_deposit is the total grant on the theorem.
	TotalGrant []types1.Coin `protobuf:"bytes,9,rep,name=total_grant,json=totalGrant,proto3" json:"total_grant"`
	// proposer is the address of the theorem submitter
	Proposer string `protobuf:"bytes,10,opt,name=proposer,proto3" json:"proposer,omitempty"`
}

func (m *Theorem) Reset()         { *m = Theorem{} }
func (m *Theorem) String() string { return proto.CompactTextString(m) }
func (*Theorem) ProtoMessage()    {}
func (*Theorem) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{4}
}
func (m *Theorem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Theorem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Theorem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Theorem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Theorem.Merge(m, src)
}
func (m *Theorem) XXX_Size() int {
	return m.Size()
}
func (m *Theorem) XXX_DiscardUnknown() {
	xxx_messageInfo_Theorem.DiscardUnknown(m)
}

var xxx_messageInfo_Theorem proto.InternalMessageInfo

func (m *Theorem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Theorem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Theorem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Theorem) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Theorem) GetProofId() string {
	if m != nil {
		return m.ProofId
	}
	return ""
}

func (m *Theorem) GetStatus() TheoremStatus {
	if m != nil {
		return m.Status
	}
	return TheoremStatus_THEOREM_STATUS_UNSPECIFIED
}

func (m *Theorem) GetSubmitTime() *time.Time {
	if m != nil {
		return m.SubmitTime
	}
	return nil
}

func (m *Theorem) GetEndTime() *time.Time {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Theorem) GetTotalGrant() []types1.Coin {
	if m != nil {
		return m.TotalGrant
	}
	return nil
}

func (m *Theorem) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

type Proof struct {
	TheoremId uint64 `protobuf:"varint,1,opt,name=theorem_id,json=theoremId,proto3" json:"theorem_id,omitempty"`
	// id defines the unique id of the proof.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// detail is the proof data attached to the theorem stored in ipfs
	Detail string `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	// status defines the theorem status.
	Status ProofStatus `protobuf:"varint,4,opt,name=status,proto3,enum=shentu.bounty.v1.ProofStatus" json:"status,omitempty"`
	// submit_time is the time of proof submission.
	SubmitTime *time.Time `protobuf:"bytes,5,opt,name=submit_time,json=submitTime,proto3,stdtime" json:"submit_time,omitempty"`
	// end_time is the time of proof timeout.
	EndTime *time.Time `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time,omitempty"`
	// prover is the address of the proof submitter
	Prover  string        `protobuf:"bytes,7,opt,name=prover,proto3" json:"prover,omitempty"`
	Deposit []types1.Coin `protobuf:"bytes,8,rep,name=Deposit,proto3" json:"Deposit"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{5}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return m.Size()
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

func (m *Proof) GetTheoremId() uint64 {
	if m != nil {
		return m.TheoremId
	}
	return 0
}

func (m *Proof) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Proof) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func (m *Proof) GetStatus() ProofStatus {
	if m != nil {
		return m.Status
	}
	return ProofStatus_PROOF_STATUS_UNSPECIFIED
}

func (m *Proof) GetSubmitTime() *time.Time {
	if m != nil {
		return m.SubmitTime
	}
	return nil
}

func (m *Proof) GetEndTime() *time.Time {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Proof) GetProver() string {
	if m != nil {
		return m.Prover
	}
	return ""
}

func (m *Proof) GetDeposit() []types1.Coin {
	if m != nil {
		return m.Deposit
	}
	return nil
}

type ProofHash struct {
	TheoremId uint64 `protobuf:"varint,1,opt,name=theorem_id,json=theoremId,proto3" json:"theorem_id,omitempty"`
	Detail    string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	Prover    string `protobuf:"bytes,3,opt,name=prover,proto3" json:"prover,omitempty"`
}

func (m *ProofHash) Reset()         { *m = ProofHash{} }
func (m *ProofHash) String() string { return proto.CompactTextString(m) }
func (*ProofHash) ProtoMessage()    {}
func (*ProofHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{6}
}
func (m *ProofHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProofHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProofHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProofHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProofHash.Merge(m, src)
}
func (m *ProofHash) XXX_Size() int {
	return m.Size()
}
func (m *ProofHash) XXX_DiscardUnknown() {
	xxx_messageInfo_ProofHash.DiscardUnknown(m)
}

var xxx_messageInfo_ProofHash proto.InternalMessageInfo

func (m *ProofHash) GetTheoremId() uint64 {
	if m != nil {
		return m.TheoremId
	}
	return 0
}

func (m *ProofHash) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func (m *ProofHash) GetProver() string {
	if m != nil {
		return m.Prover
	}
	return ""
}

// Grant defines an amount granted by a grantor to an active theorem.
type Grant struct {
	// theorem_id defines the unique id of the theorem.
	TheoremId uint64 `protobuf:"varint,1,opt,name=theorem_id,json=theoremId,proto3" json:"theorem_id,omitempty"`
	// grantor defines the grant addresses.
	Grantor string `protobuf:"bytes,2,opt,name=grantor,proto3" json:"grantor,omitempty"`
	// amount to be deposited by the grantor.
	Amount []types1.Coin `protobuf:"bytes,3,rep,name=amount,proto3" json:"amount"`
}

func (m *Grant) Reset()         { *m = Grant{} }
func (m *Grant) String() string { return proto.CompactTextString(m) }
func (*Grant) ProtoMessage()    {}
func (*Grant) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{7}
}
func (m *Grant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Grant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Grant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Grant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Grant.Merge(m, src)
}
func (m *Grant) XXX_Size() int {
	return m.Size()
}
func (m *Grant) XXX_DiscardUnknown() {
	xxx_messageInfo_Grant.DiscardUnknown(m)
}

var xxx_messageInfo_Grant proto.InternalMessageInfo

func (m *Grant) GetTheoremId() uint64 {
	if m != nil {
		return m.TheoremId
	}
	return 0
}

func (m *Grant) GetGrantor() string {
	if m != nil {
		return m.Grantor
	}
	return ""
}

func (m *Grant) GetAmount() []types1.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

// Deposit defines an amount granted by a grantor to an active theorem.
type Deposit struct {
	// theorem_id defines the unique id of the theorem.
	ProofId string `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	// depositor defines the deposit addresses.
	Depositor string `protobuf:"bytes,2,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// amount to be deposited by the depositor.
	Amount []types1.Coin `protobuf:"bytes,3,rep,name=amount,proto3" json:"amount"`
}

func (m *Deposit) Reset()         { *m = Deposit{} }
func (m *Deposit) String() string { return proto.CompactTextString(m) }
func (*Deposit) ProtoMessage()    {}
func (*Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{8}
}
func (m *Deposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deposit.Merge(m, src)
}
func (m *Deposit) XXX_Size() int {
	return m.Size()
}
func (m *Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_Deposit proto.InternalMessageInfo

func (m *Deposit) GetProofId() string {
	if m != nil {
		return m.ProofId
	}
	return ""
}

func (m *Deposit) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *Deposit) GetAmount() []types1.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

type Params struct {
	// Minimum grant for a theorem to enter the proof period.
	MinGrant []types1.Coin `protobuf:"bytes,1,rep,name=min_grant,json=minGrant,proto3" json:"min_grant"`
	// Minimum deposit for a proof to enter the proof_hash_lock period.
	MinDeposit []types1.Coin `protobuf:"bytes,2,rep,name=min_deposit,json=minDeposit,proto3" json:"min_deposit"`
	// Duration of the theorem proof period. Initial value: 2 weeks.
	TheoremMaxProofPeriod *time.Duration `protobuf:"bytes,3,opt,name=theorem_max_proof_period,json=theoremMaxProofPeriod,proto3,stdduration" json:"theorem_max_proof_period,omitempty"`
	// Duration of the proof max lock period. 10min
	ProofMaxLockPeriod *time.Duration `protobuf:"bytes,4,opt,name=proof_max_lock_period,json=proofMaxLockPeriod,proto3,stdduration" json:"proof_max_lock_period,omitempty"`
	// rate is the checker rate charged to theorem
	CheckerRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=checker_rate,json=checkerRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"checker_rate"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{9}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMinGrant() []types1.Coin {
	if m != nil {
		return m.MinGrant
	}
	return nil
}

func (m *Params) GetMinDeposit() []types1.Coin {
	if m != nil {
		return m.MinDeposit
	}
	return nil
}

func (m *Params) GetTheoremMaxProofPeriod() *time.Duration {
	if m != nil {
		return m.TheoremMaxProofPeriod
	}
	return nil
}

func (m *Params) GetProofMaxLockPeriod() *time.Duration {
	if m != nil {
		return m.ProofMaxLockPeriod
	}
	return nil
}

type Reward struct {
	Address string                                      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Reward  github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=reward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"reward"`
}

func (m *Reward) Reset()         { *m = Reward{} }
func (m *Reward) String() string { return proto.CompactTextString(m) }
func (*Reward) ProtoMessage()    {}
func (*Reward) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{10}
}
func (m *Reward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reward.Merge(m, src)
}
func (m *Reward) XXX_Size() int {
	return m.Size()
}
func (m *Reward) XXX_DiscardUnknown() {
	xxx_messageInfo_Reward.DiscardUnknown(m)
}

var xxx_messageInfo_Reward proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("shentu.bounty.v1.ProgramStatus", ProgramStatus_name, ProgramStatus_value)
	proto.RegisterEnum("shentu.bounty.v1.SeverityLevel", SeverityLevel_name, SeverityLevel_value)
	proto.RegisterEnum("shentu.bounty.v1.FindingStatus", FindingStatus_name, FindingStatus_value)
	proto.RegisterEnum("shentu.bounty.v1.TheoremStatus", TheoremStatus_name, TheoremStatus_value)
	proto.RegisterEnum("shentu.bounty.v1.ProofStatus", ProofStatus_name, ProofStatus_value)
	proto.RegisterType((*Program)(nil), "shentu.bounty.v1.Program")
	proto.RegisterType((*Finding)(nil), "shentu.bounty.v1.Finding")
	proto.RegisterType((*ProgramFingerprint)(nil), "shentu.bounty.v1.ProgramFingerprint")
	proto.RegisterType((*FindingFingerprint)(nil), "shentu.bounty.v1.FindingFingerprint")
	proto.RegisterType((*Theorem)(nil), "shentu.bounty.v1.Theorem")
	proto.RegisterType((*Proof)(nil), "shentu.bounty.v1.Proof")
	proto.RegisterType((*ProofHash)(nil), "shentu.bounty.v1.ProofHash")
	proto.RegisterType((*Grant)(nil), "shentu.bounty.v1.Grant")
	proto.RegisterType((*Deposit)(nil), "shentu.bounty.v1.Deposit")
	proto.RegisterType((*Params)(nil), "shentu.bounty.v1.Params")
	proto.RegisterType((*Reward)(nil), "shentu.bounty.v1.Reward")
}

func init() { proto.RegisterFile("shentu/bounty/v1/bounty.proto", fileDescriptor_36e6d679af1b94c6) }

var fileDescriptor_36e6d679af1b94c6 = []byte{
	// 1877 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0xcf, 0x6f, 0xdb, 0xc8,
	0x15, 0x36, 0x25, 0x59, 0x3f, 0x9e, 0xec, 0xac, 0x3c, 0x8e, 0x62, 0x59, 0x71, 0x44, 0x2d, 0xb7,
	0x05, 0xb2, 0x29, 0x22, 0xd5, 0xde, 0x34, 0x0d, 0xdc, 0x1f, 0x80, 0x2c, 0xd1, 0x31, 0x1b, 0xc9,
	0x12, 0x28, 0x39, 0xed, 0xb6, 0x07, 0x81, 0x26, 0x47, 0x32, 0x61, 0x91, 0x14, 0x48, 0xda, 0x1b,
	0x1f, 0x7b, 0x29, 0x16, 0x3a, 0xa5, 0xb7, 0x45, 0x0b, 0x01, 0x5b, 0xf4, 0x52, 0x14, 0x28, 0x50,
	0x14, 0xdb, 0xfe, 0x0d, 0x7b, 0x5c, 0xec, 0xa9, 0xe8, 0x41, 0x5b, 0x24, 0x87, 0x16, 0x05, 0x0a,
	0x14, 0xba, 0xf4, 0x5a, 0x70, 0x66, 0x24, 0x8b, 0xb4, 0x5c, 0xdb, 0xbb, 0xcd, 0xa9, 0x97, 0x44,
	0x33, 0xef, 0xfb, 0x1e, 0x87, 0xdf, 0xf7, 0xde, 0xd3, 0xc8, 0x70, 0xcf, 0x39, 0xc2, 0xa6, 0x7b,
	0x52, 0x3c, 0xb4, 0x4e, 0x4c, 0xf7, 0xac, 0x78, 0xba, 0xc9, 0x3e, 0x15, 0xfa, 0xb6, 0xe5, 0x5a,
	0x28, 0x45, 0xc3, 0x05, 0xb6, 0x79, 0xba, 0x99, 0xbd, 0xdd, 0xb5, 0xba, 0x16, 0x09, 0x16, 0xbd,
	0x4f, 0x14, 0x97, 0xe5, 0xbb, 0x96, 0xd5, 0xed, 0xe1, 0x22, 0x59, 0x1d, 0x9e, 0x74, 0x8a, 0xae,
	0x6e, 0x60, 0xc7, 0x55, 0x8c, 0x3e, 0x03, 0xe4, 0x54, 0xcb, 0x31, 0x2c, 0xa7, 0x78, 0xa8, 0x38,
	0xb8, 0x78, 0xba, 0x79, 0x88, 0x5d, 0x65, 0xb3, 0xa8, 0x5a, 0xba, 0xc9, 0xe2, 0xeb, 0x34, 0xde,
	0xa6, 0x99, 0xe9, 0x62, 0x12, 0x0a, 0xe6, 0x56, 0xcc, 0xb3, 0x49, 0xd6, 0x60, 0x48, 0x3b, 0xb1,
	0x15, 0x57, 0xb7, 0x26, 0x59, 0x57, 0x14, 0x43, 0x37, 0xad, 0x22, 0xf9, 0x97, 0x6e, 0x09, 0x3f,
	0x0d, 0x43, 0xac, 0x61, 0x5b, 0x5d, 0x5b, 0x31, 0xd0, 0x23, 0x80, 0x3e, 0xfd, 0xd8, 0xd6, 0xb5,
	0x0c, 0x97, 0xe7, 0xee, 0x27, 0x76, 0xd2, 0xe3, 0x11, 0xbf, 0x72, 0xa6, 0x18, 0xbd, 0x6d, 0xe1,
	0x3c, 0x26, 0xc8, 0x09, 0xb6, 0x90, 0x34, 0xf4, 0x0e, 0x44, 0x4c, 0xc5, 0xc0, 0x99, 0x10, 0xc1,
	0xbf, 0x35, 0x1e, 0xf1, 0x49, 0x8a, 0xf7, 0x76, 0x05, 0x99, 0x04, 0xd1, 0xbb, 0x10, 0xd5, 0xb0,
	0xab, 0xe8, 0xbd, 0x4c, 0x98, 0xc0, 0x56, 0xc6, 0x23, 0x7e, 0x99, 0xc2, 0xe8, 0xbe, 0x20, 0x33,
	0x00, 0xfa, 0x1e, 0x2c, 0x2b, 0x9a, 0xa1, 0x9b, 0x6d, 0x45, 0xd3, 0x6c, 0xec, 0x38, 0x99, 0x08,
	0x61, 0x64, 0xc6, 0x23, 0xfe, 0x36, 0x65, 0xf8, 0xc2, 0x82, 0xbc, 0x44, 0xd6, 0x25, 0xba, 0x44,
	0x3f, 0x80, 0xa8, 0xe3, 0x2a, 0xee, 0x89, 0x93, 0x59, 0xcc, 0x73, 0xf7, 0x6f, 0x6d, 0xf1, 0x85,
	0xa0, 0x67, 0x05, 0xf6, 0xbe, 0x4d, 0x02, 0x9b, 0x3d, 0x0a, 0x25, 0x0a, 0x32, 0xcb, 0x80, 0x7e,
	0x02, 0x49, 0xd5, 0xc6, 0x8a, 0x8b, 0xdb, 0x9e, 0x7f, 0x99, 0x68, 0x9e, 0xbb, 0x9f, 0xdc, 0xca,
	0x16, 0xa8, 0xca, 0x85, 0x89, 0xca, 0x85, 0xd6, 0xc4, 0xdc, 0x9d, 0xdc, 0xa7, 0x23, 0x7e, 0x61,
	0x3c, 0xe2, 0x11, 0xcd, 0x37, 0x43, 0x16, 0x5e, 0x7e, 0xc1, 0x73, 0x32, 0xd0, 0x1d, 0x8f, 0xb0,
	0x1d, 0xff, 0xf0, 0x63, 0x7e, 0xe1, 0xef, 0x1f, 0xf3, 0x0b, 0xc2, 0xcb, 0x28, 0xc4, 0x76, 0x75,
	0x53, 0xd3, 0xcd, 0xee, 0x97, 0xf4, 0xe0, 0x11, 0x40, 0x87, 0x26, 0xf0, 0x58, 0xa1, 0x20, 0xeb,
	0x3c, 0x26, 0xc8, 0x09, 0xb6, 0x90, 0x34, 0x74, 0x1b, 0x16, 0x5d, 0xdd, 0xed, 0x61, 0xea, 0x89,
	0x4c, 0x17, 0xe8, 0x09, 0x24, 0x35, 0xec, 0xa8, 0xb6, 0xde, 0xf7, 0x2a, 0x87, 0xa9, 0x7f, 0xe7,
	0xfc, 0xa5, 0x66, 0x82, 0x82, 0x3c, 0x0b, 0x45, 0x22, 0xa4, 0xfa, 0xb6, 0x65, 0x75, 0xda, 0x56,
	0xa7, 0xad, 0x5a, 0xa6, 0x8a, 0xfb, 0x2e, 0x31, 0x21, 0xb1, 0x73, 0x77, 0x3c, 0xe2, 0xd7, 0xa6,
	0x6f, 0xe0, 0x43, 0x08, 0xf2, 0x2d, 0xb2, 0x55, 0xef, 0x94, 0xe9, 0x06, 0xda, 0x86, 0xa5, 0xc9,
	0x81, 0x8f, 0x14, 0xe7, 0x88, 0xc8, 0x9e, 0xd8, 0x59, 0x1b, 0x8f, 0xf8, 0x55, 0xff, 0xeb, 0x78,
	0x51, 0x41, 0x4e, 0xb2, 0xe5, 0x9e, 0xe2, 0x1c, 0x21, 0x09, 0x56, 0x9c, 0x93, 0x43, 0x43, 0x77,
	0x5d, 0x6c, 0x4f, 0x0b, 0x28, 0x46, 0x12, 0x6c, 0x8c, 0x47, 0x7c, 0x86, 0xf9, 0x1c, 0x84, 0x08,
	0x72, 0x6a, 0xba, 0x37, 0x29, 0x24, 0x05, 0x6e, 0x39, 0xf8, 0x14, 0xdb, 0xba, 0x7b, 0xd6, 0xee,
	0xe1, 0x53, 0xdc, 0xcb, 0xc4, 0x2f, 0x2b, 0xa8, 0x26, 0xc3, 0x55, 0x3d, 0xd8, 0xce, 0xfa, 0x78,
	0xc4, 0xa7, 0xd9, 0x83, 0x7c, 0x09, 0x04, 0x79, 0xd9, 0x99, 0x45, 0xce, 0xd4, 0x6a, 0xe2, 0xb2,
	0xd4, 0xac, 0x2e, 0xae, 0xae, 0xd5, 0xf3, 0x0e, 0x83, 0xab, 0x3a, 0x6c, 0x1b, 0x96, 0xfa, 0xca,
	0x99, 0x81, 0x4d, 0x97, 0x0a, 0x9c, 0x0c, 0x0a, 0x3c, 0x1b, 0x15, 0xe4, 0x24, 0x5b, 0x12, 0x81,
	0x03, 0x2d, 0xb1, 0xf4, 0x86, 0x5a, 0xe2, 0x77, 0x21, 0x40, 0xac, 0x4d, 0x77, 0x75, 0xb3, 0x8b,
	0xed, 0xbe, 0xad, 0x9b, 0x2e, 0xda, 0x9a, 0xd3, 0x1d, 0xab, 0xff, 0x18, 0xf1, 0x21, 0x5d, 0x1b,
	0x8f, 0xf8, 0x04, 0x7d, 0xc4, 0xff, 0xcd, 0x7c, 0x9a, 0xd1, 0xeb, 0x5f, 0x61, 0x40, 0xac, 0x54,
	0x66, 0xf5, 0xfa, 0x72, 0xd3, 0x64, 0x6b, 0xce, 0x34, 0x99, 0xaf, 0xf2, 0x55, 0xb3, 0x24, 0xd8,
	0xca, 0x91, 0x1b, 0xb4, 0xf2, 0xc5, 0xfe, 0x5b, 0x7c, 0x73, 0xfd, 0x17, 0xfd, 0x1f, 0xf6, 0x5f,
	0xec, 0xa6, 0xfd, 0x17, 0xbf, 0x7e, 0xff, 0xcd, 0x58, 0xfe, 0xa7, 0x30, 0xc4, 0x5a, 0x47, 0xd8,
	0xb2, 0xb1, 0x81, 0x6e, 0x41, 0x88, 0xf9, 0x1b, 0x91, 0x43, 0xfa, 0x8c, 0x1b, 0xa1, 0x59, 0x37,
	0xf2, 0xfe, 0xc9, 0x4e, 0x9d, 0xf2, 0x4d, 0x70, 0x04, 0x11, 0xd5, 0xd2, 0x30, 0xf5, 0x49, 0x26,
	0x9f, 0xd1, 0x3a, 0xc4, 0xe9, 0xcc, 0xd6, 0x35, 0x3a, 0xcd, 0xe5, 0x18, 0x59, 0x4b, 0x1a, 0xfa,
	0xf6, 0xd5, 0xfa, 0xb1, 0x13, 0x52, 0xfd, 0xa6, 0x62, 0x95, 0x20, 0x49, 0xe7, 0x2d, 0x9d, 0x22,
	0xb1, 0x2b, 0xa7, 0x48, 0x84, 0xce, 0x0a, 0x4a, 0xf2, 0xb6, 0xd1, 0x77, 0x20, 0x8e, 0x4d, 0x8d,
	0xf2, 0xe3, 0xd7, 0xe4, 0xc7, 0xb0, 0xa9, 0x11, 0xb2, 0x08, 0x49, 0xd7, 0x72, 0x95, 0x5e, 0xbb,
	0x6b, 0x2b, 0xa6, 0x9b, 0x49, 0xe4, 0xc3, 0xf7, 0x93, 0x5b, 0xeb, 0x05, 0x76, 0xcf, 0xf2, 0x2e,
	0x65, 0x05, 0x76, 0x29, 0x2b, 0x94, 0x2d, 0xdd, 0xdc, 0x49, 0x78, 0x43, 0xec, 0x37, 0x7f, 0xfb,
	0xfd, 0x03, 0x4e, 0x06, 0x42, 0x7c, 0xea, 0xf1, 0xd0, 0x23, 0x22, 0x4d, 0xdf, 0x72, 0xb0, 0xcd,
	0xa6, 0x6e, 0xe6, 0xf3, 0x4f, 0x1e, 0xde, 0x66, 0x69, 0x58, 0xc7, 0x37, 0x5d, 0x5b, 0x37, 0xbb,
	0xf2, 0x14, 0x29, 0xfc, 0x3b, 0x04, 0x8b, 0x0d, 0x4f, 0x41, 0x74, 0x0f, 0xc0, 0xa5, 0xfa, 0xb4,
	0xa7, 0xf6, 0x25, 0xd8, 0x8e, 0xa4, 0x31, 0x57, 0xa9, 0x85, 0x9e, 0xab, 0x77, 0xfc, 0x43, 0x6a,
	0x5a, 0x4f, 0xdf, 0x9a, 0xda, 0x10, 0x21, 0x36, 0xdc, 0x9b, 0x3b, 0x52, 0xac, 0xce, 0x7f, 0x37,
	0x61, 0xf1, 0x2b, 0x9a, 0x10, 0xbd, 0xa9, 0x09, 0xdf, 0x84, 0x68, 0xdf, 0xb6, 0x4e, 0xb1, 0xcd,
	0x3a, 0xe6, 0x72, 0xed, 0x18, 0x0e, 0x7d, 0x1f, 0x62, 0x15, 0xdc, 0xb7, 0x1c, 0xdd, 0xcd, 0xc4,
	0x6f, 0x60, 0xd9, 0x84, 0x24, 0xb8, 0x90, 0x20, 0x42, 0x90, 0xf9, 0x72, 0x85, 0xf8, 0xe7, 0x62,
	0x87, 0x7c, 0x62, 0x9f, 0x9f, 0x3a, 0x7c, 0xbd, 0x53, 0x0b, 0x1f, 0x71, 0xb0, 0x48, 0xeb, 0xe5,
	0x8a, 0x47, 0x6e, 0x41, 0x8c, 0xd4, 0xa3, 0x65, 0xb3, 0xa1, 0x7b, 0x79, 0xee, 0x09, 0x10, 0x7d,
	0x17, 0xa2, 0x8a, 0xe1, 0xd9, 0x9c, 0x09, 0xdf, 0x40, 0x11, 0xc6, 0x11, 0x7e, 0xc1, 0x4d, 0x15,
	0xf5, 0xf5, 0x39, 0xe7, 0xef, 0xf3, 0xc7, 0x90, 0xd0, 0x28, 0xea, 0x1a, 0x47, 0x3b, 0x87, 0x7e,
	0xc5, 0xc3, 0xfd, 0x32, 0x0c, 0xd1, 0x86, 0x62, 0x2b, 0x86, 0x57, 0xaa, 0x09, 0xef, 0x2b, 0x95,
	0x76, 0x2b, 0x77, 0x83, 0x5c, 0x71, 0x43, 0x37, 0xa9, 0xf6, 0x22, 0x24, 0xbd, 0x14, 0xec, 0x70,
	0x99, 0xd0, 0x4d, 0x5a, 0xde, 0xd0, 0xcd, 0x89, 0x4a, 0x3f, 0x82, 0xcc, 0xc4, 0x42, 0x43, 0x79,
	0xd1, 0xa6, 0x8a, 0xf5, 0xb1, 0xad, 0x5b, 0x1a, 0x29, 0x08, 0x2f, 0x67, 0xb0, 0x03, 0x2a, 0xec,
	0x57, 0xd8, 0x4e, 0xe4, 0x23, 0xaf, 0x01, 0xd2, 0x2c, 0x41, 0x4d, 0x79, 0x41, 0xaa, 0xb1, 0x41,
	0xd8, 0x48, 0x86, 0x34, 0xcd, 0xe6, 0xe5, 0xed, 0x59, 0xea, 0xf1, 0x24, 0x6d, 0xe4, 0x7a, 0x69,
	0x11, 0x61, 0xd7, 0x94, 0x17, 0x55, 0x4b, 0x3d, 0x66, 0x39, 0xdf, 0x87, 0x25, 0xf5, 0x08, 0xab,
	0xc7, 0xd8, 0x6e, 0xdb, 0x8a, 0x8b, 0xd9, 0x6d, 0xfc, 0xb1, 0xf7, 0x6a, 0x7f, 0x19, 0xf1, 0x77,
	0xe9, 0xcb, 0x3b, 0xda, 0x71, 0x41, 0xb7, 0x8a, 0x86, 0xe2, 0x1e, 0x15, 0xaa, 0xb8, 0xab, 0xa8,
	0x67, 0x15, 0xac, 0x7e, 0xfe, 0xc9, 0x43, 0x60, 0xda, 0x54, 0xb0, 0x4a, 0x75, 0x48, 0xb2, 0x5c,
	0xb2, 0xe2, 0x62, 0xe1, 0x0f, 0x1c, 0x44, 0x65, 0xfc, 0x81, 0x62, 0x93, 0xba, 0x9d, 0xdc, 0x85,
	0xb8, 0xab, 0xea, 0x96, 0x01, 0x91, 0x09, 0x51, 0x9b, 0xb0, 0x99, 0x13, 0x1b, 0x73, 0x9d, 0xa8,
	0x60, 0x95, 0x98, 0xf1, 0xc4, 0x3b, 0xf1, 0x6f, 0xbf, 0xe0, 0xbf, 0xd1, 0xd5, 0xdd, 0xa3, 0x93,
	0xc3, 0x82, 0x6a, 0x19, 0xec, 0x47, 0x31, 0xfb, 0xef, 0xa1, 0xa3, 0x1d, 0x17, 0xdd, 0xb3, 0x3e,
	0x76, 0x26, 0x1c, 0x87, 0x15, 0x13, 0x7d, 0xca, 0x76, 0xc4, 0xfb, 0xde, 0x7c, 0xf0, 0x47, 0x0e,
	0x96, 0x7d, 0xb7, 0x2b, 0xf4, 0x18, 0xd6, 0x1a, 0x72, 0xfd, 0xa9, 0x5c, 0xaa, 0xb5, 0x9b, 0xad,
	0x52, 0xeb, 0xa0, 0xd9, 0x96, 0xf6, 0x4b, 0xe5, 0x96, 0xf4, 0x5c, 0x4c, 0x2d, 0x64, 0xd7, 0x07,
	0xc3, 0x7c, 0xda, 0x87, 0x97, 0x4c, 0x45, 0x75, 0xf5, 0x53, 0x8c, 0xb6, 0x20, 0x1d, 0xe0, 0x31,
	0x16, 0x97, 0x5d, 0x1b, 0x0c, 0xf3, 0xab, 0x3e, 0x56, 0xe9, 0x32, 0x4e, 0xb9, 0x5a, 0x6f, 0x8a,
	0x95, 0x54, 0x68, 0x0e, 0xa7, 0xdc, 0xb3, 0x1c, 0xac, 0x65, 0x23, 0x1f, 0xfe, 0x3a, 0xb7, 0xf0,
	0xe0, 0xe7, 0x21, 0x58, 0xf6, 0x5d, 0x72, 0x50, 0x11, 0xb2, 0x4d, 0xf1, 0xb9, 0x28, 0x4b, 0xad,
	0xf7, 0xdb, 0x55, 0xf1, 0xb9, 0x58, 0x6d, 0x1f, 0xec, 0x37, 0x1b, 0x62, 0x59, 0xda, 0x95, 0xc4,
	0x4a, 0x6a, 0x21, 0xfb, 0xd6, 0x60, 0x98, 0x4f, 0x1e, 0x98, 0x4e, 0x1f, 0xab, 0x7a, 0x47, 0xc7,
	0x1a, 0x7a, 0x17, 0xd6, 0x02, 0x84, 0xb2, 0x2c, 0xb5, 0xa4, 0x72, 0xa9, 0x9a, 0xe2, 0xb2, 0x4b,
	0x83, 0x61, 0x3e, 0x5e, 0xb6, 0x75, 0x57, 0x57, 0x95, 0x1e, 0x7a, 0x1b, 0x56, 0x03, 0xd0, 0x3d,
	0xe9, 0xe9, 0x5e, 0x2a, 0x94, 0x8d, 0x0f, 0x86, 0xf9, 0xc8, 0x9e, 0xde, 0x3d, 0x42, 0x5f, 0x87,
	0x74, 0x00, 0x52, 0x13, 0x2b, 0xd2, 0x41, 0x2d, 0x15, 0xce, 0xc2, 0x60, 0x98, 0x8f, 0xd6, 0xb0,
	0xa6, 0x9f, 0x18, 0x88, 0x07, 0x14, 0x80, 0x55, 0xeb, 0x3f, 0x4c, 0x45, 0xb2, 0xb1, 0xc1, 0x30,
	0x1f, 0xae, 0x5a, 0x1f, 0xa0, 0xf7, 0x60, 0x23, 0x00, 0x90, 0xf6, 0x77, 0xeb, 0x72, 0xad, 0xd4,
	0x92, 0xea, 0xfb, 0xa5, 0x6a, 0x6a, 0x31, 0xbb, 0x32, 0x18, 0xe6, 0x97, 0x25, 0xb3, 0x63, 0xd9,
	0x06, 0xa9, 0x76, 0xa5, 0xc7, 0x34, 0xf9, 0x55, 0x08, 0x96, 0x7d, 0xb7, 0x33, 0xf4, 0x04, 0x32,
	0xbb, 0xd2, 0x7e, 0x45, 0xda, 0x7f, 0x3a, 0xd1, 0xb7, 0x79, 0xb0, 0x53, 0x93, 0x5a, 0x2d, 0xa2,
	0x48, 0x76, 0x30, 0xcc, 0xdf, 0xf1, 0x11, 0x9a, 0xec, 0x27, 0x9f, 0x57, 0xc1, 0xe9, 0x00, 0xd3,
	0xef, 0xa6, 0x8f, 0xc6, 0xdc, 0xbc, 0xf8, 0xb4, 0x72, 0x7d, 0x7f, 0x57, 0x92, 0x6b, 0xc4, 0xd0,
	0x8b, 0x4f, 0x2b, 0x5b, 0x66, 0x47, 0xb7, 0x0d, 0xac, 0xa1, 0x02, 0xac, 0x06, 0x98, 0x8d, 0x92,
	0x54, 0x49, 0x85, 0xb3, 0xe9, 0xc1, 0x30, 0xbf, 0xe2, 0x23, 0x35, 0x14, 0x7d, 0xde, 0xe9, 0x58,
	0xdd, 0x44, 0xe6, 0x9c, 0xce, 0x57, 0x37, 0x3f, 0xe3, 0x60, 0xd9, 0x77, 0x03, 0x43, 0x39, 0xc8,
	0xb6, 0xf6, 0xc4, 0xba, 0x2c, 0x4e, 0x6b, 0xd0, 0x57, 0x37, 0x88, 0x87, 0xbb, 0x81, 0x78, 0x43,
	0xae, 0xd7, 0x77, 0xdb, 0x0d, 0x51, 0x96, 0xea, 0x95, 0x14, 0x87, 0xd6, 0x21, 0x1d, 0x04, 0x94,
	0x9a, 0xa4, 0x88, 0xe7, 0x84, 0xd8, 0x39, 0xc3, 0x0f, 0xfe, 0xc9, 0x41, 0x72, 0xe6, 0x0e, 0x82,
	0x36, 0x20, 0x43, 0xf3, 0xce, 0x3d, 0xc4, 0xdb, 0x70, 0xcf, 0x17, 0xdd, 0x2b, 0x35, 0xf7, 0xda,
	0xd5, 0x7a, 0xf9, 0xd9, 0xf9, 0x31, 0xbe, 0x06, 0xf9, 0x8b, 0x90, 0x8a, 0xd8, 0x2a, 0x49, 0xd5,
	0x76, 0x4b, 0xaa, 0x89, 0xf5, 0x83, 0x56, 0x2a, 0x84, 0xde, 0x01, 0xfe, 0x52, 0x14, 0x4b, 0x15,
	0x46, 0x6b, 0xb0, 0xea, 0x03, 0xb1, 0xf7, 0x89, 0x5c, 0x08, 0xec, 0x96, 0xa4, 0xaa, 0x58, 0x49,
	0x2d, 0xa2, 0x3c, 0x6c, 0xf8, 0x02, 0xe5, 0x3d, 0xb1, 0xfc, 0x4c, 0x94, 0xa7, 0x0f, 0x8e, 0xee,
	0x3c, 0xfb, 0xf4, 0x55, 0x8e, 0xfb, 0xec, 0x55, 0x8e, 0xfb, 0xeb, 0xab, 0x1c, 0xf7, 0xf2, 0x75,
	0x6e, 0xe1, 0xb3, 0xd7, 0xb9, 0x85, 0x3f, 0xbf, 0xce, 0x2d, 0xfc, 0x78, 0x73, 0x66, 0x84, 0xd1,
	0x6b, 0x5a, 0xc7, 0x3a, 0x31, 0x35, 0x52, 0xdb, 0x6c, 0xa3, 0xf8, 0x62, 0xf2, 0xf7, 0x47, 0x32,
	0xd1, 0x0e, 0xa3, 0x64, 0xe4, 0xbf, 0xf7, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xa8, 0x3e,
	0x97, 0x9d, 0x14, 0x00, 0x00,
}

func (m *Program) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Program) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Program) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreateTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreateTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintBounty(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if m.Status != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Finding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Finding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Finding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreateTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreateTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintBounty(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x62
	if len(m.PaymentHash) > 0 {
		i -= len(m.PaymentHash)
		copy(dAtA[i:], m.PaymentHash)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.PaymentHash)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0x52
	}
	if m.Status != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.SeverityLevel != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.SeverityLevel))
		i--
		dAtA[i] = 0x40
	}
	if len(m.SubmitterAddress) > 0 {
		i -= len(m.SubmitterAddress)
		copy(dAtA[i:], m.SubmitterAddress)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.SubmitterAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FindingHash) > 0 {
		i -= len(m.FindingHash)
		copy(dAtA[i:], m.FindingHash)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.FindingHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProofOfConcept) > 0 {
		i -= len(m.ProofOfConcept)
		copy(dAtA[i:], m.ProofOfConcept)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.ProofOfConcept)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FindingId) > 0 {
		i -= len(m.FindingId)
		copy(dAtA[i:], m.FindingId)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.FindingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProgramFingerprint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProgramFingerprint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProgramFingerprint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindingFingerprint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindingFingerprint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindingFingerprint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentHash) > 0 {
		i -= len(m.PaymentHash)
		copy(dAtA[i:], m.PaymentHash)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.PaymentHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.SeverityLevel != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.SeverityLevel))
		i--
		dAtA[i] = 0x28
	}
	if len(m.FindingHash) > 0 {
		i -= len(m.FindingHash)
		copy(dAtA[i:], m.FindingHash)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.FindingHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FindingId) > 0 {
		i -= len(m.FindingId)
		copy(dAtA[i:], m.FindingId)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.FindingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Theorem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Theorem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Theorem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TotalGrant) > 0 {
		for iNdEx := len(m.TotalGrant) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalGrant[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBounty(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.EndTime != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EndTime):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintBounty(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x42
	}
	if m.SubmitTime != nil {
		n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.SubmitTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.SubmitTime):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintBounty(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ProofId) > 0 {
		i -= len(m.ProofId)
		copy(dAtA[i:], m.ProofId)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.ProofId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposit) > 0 {
		for iNdEx := len(m.Deposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBounty(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Prover) > 0 {
		i -= len(m.Prover)
		copy(dAtA[i:], m.Prover)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Prover)))
		i--
		dAtA[i] = 0x3a
	}
	if m.EndTime != nil {
		n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EndTime):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintBounty(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x32
	}
	if m.SubmitTime != nil {
		n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.SubmitTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.SubmitTime):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintBounty(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if m.TheoremId != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.TheoremId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProofHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProofHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProofHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prover) > 0 {
		i -= len(m.Prover)
		copy(dAtA[i:], m.Prover)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Prover)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0x12
	}
	if m.TheoremId != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.TheoremId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Grant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Grant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Grant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBounty(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Grantor) > 0 {
		i -= len(m.Grantor)
		copy(dAtA[i:], m.Grantor)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Grantor)))
		i--
		dAtA[i] = 0x12
	}
	if m.TheoremId != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.TheoremId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Deposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBounty(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProofId) > 0 {
		i -= len(m.ProofId)
		copy(dAtA[i:], m.ProofId)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.ProofId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CheckerRate.Size()
		i -= size
		if _, err := m.CheckerRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBounty(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.ProofMaxLockPeriod != nil {
		n7, err7 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.ProofMaxLockPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.ProofMaxLockPeriod):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintBounty(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x22
	}
	if m.TheoremMaxProofPeriod != nil {
		n8, err8 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.TheoremMaxProofPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.TheoremMaxProofPeriod):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintBounty(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MinDeposit) > 0 {
		for iNdEx := len(m.MinDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBounty(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MinGrant) > 0 {
		for iNdEx := len(m.MinGrant) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinGrant[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBounty(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Reward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBounty(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBounty(dAtA []byte, offset int, v uint64) int {
	offset -= sovBounty(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Program) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBounty(uint64(m.Status))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreateTime)
	n += 1 + l + sovBounty(uint64(l))
	return n
}

func (m *Finding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.FindingId)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.ProofOfConcept)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.FindingHash)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.SubmitterAddress)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if m.SeverityLevel != 0 {
		n += 1 + sovBounty(uint64(m.SeverityLevel))
	}
	if m.Status != 0 {
		n += 1 + sovBounty(uint64(m.Status))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.PaymentHash)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreateTime)
	n += 1 + l + sovBounty(uint64(l))
	return n
}

func (m *ProgramFingerprint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBounty(uint64(m.Status))
	}
	return n
}

func (m *FindingFingerprint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.FindingId)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.FindingHash)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if m.SeverityLevel != 0 {
		n += 1 + sovBounty(uint64(m.SeverityLevel))
	}
	if m.Status != 0 {
		n += 1 + sovBounty(uint64(m.Status))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.PaymentHash)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	return n
}

func (m *Theorem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBounty(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.ProofId)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBounty(uint64(m.Status))
	}
	if m.SubmitTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.SubmitTime)
		n += 1 + l + sovBounty(uint64(l))
	}
	if m.EndTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EndTime)
		n += 1 + l + sovBounty(uint64(l))
	}
	if len(m.TotalGrant) > 0 {
		for _, e := range m.TotalGrant {
			l = e.Size()
			n += 1 + l + sovBounty(uint64(l))
		}
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	return n
}

func (m *Proof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TheoremId != 0 {
		n += 1 + sovBounty(uint64(m.TheoremId))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBounty(uint64(m.Status))
	}
	if m.SubmitTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.SubmitTime)
		n += 1 + l + sovBounty(uint64(l))
	}
	if m.EndTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EndTime)
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Prover)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if len(m.Deposit) > 0 {
		for _, e := range m.Deposit {
			l = e.Size()
			n += 1 + l + sovBounty(uint64(l))
		}
	}
	return n
}

func (m *ProofHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TheoremId != 0 {
		n += 1 + sovBounty(uint64(m.TheoremId))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Prover)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	return n
}

func (m *Grant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TheoremId != 0 {
		n += 1 + sovBounty(uint64(m.TheoremId))
	}
	l = len(m.Grantor)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovBounty(uint64(l))
		}
	}
	return n
}

func (m *Deposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProofId)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovBounty(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MinGrant) > 0 {
		for _, e := range m.MinGrant {
			l = e.Size()
			n += 1 + l + sovBounty(uint64(l))
		}
	}
	if len(m.MinDeposit) > 0 {
		for _, e := range m.MinDeposit {
			l = e.Size()
			n += 1 + l + sovBounty(uint64(l))
		}
	}
	if m.TheoremMaxProofPeriod != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.TheoremMaxProofPeriod)
		n += 1 + l + sovBounty(uint64(l))
	}
	if m.ProofMaxLockPeriod != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.ProofMaxLockPeriod)
		n += 1 + l + sovBounty(uint64(l))
	}
	l = m.CheckerRate.Size()
	n += 1 + l + sovBounty(uint64(l))
	return n
}

func (m *Reward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovBounty(uint64(l))
		}
	}
	return n
}

func sovBounty(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBounty(x uint64) (n int) {
	return sovBounty(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Program) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Program: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Program: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProgramStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreateTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Finding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Finding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Finding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofOfConcept", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofOfConcept = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmitterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeverityLevel", wireType)
			}
			m.SeverityLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeverityLevel |= SeverityLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= FindingStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreateTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProgramFingerprint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgramFingerprint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgramFingerprint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProgramStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindingFingerprint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindingFingerprint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindingFingerprint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeverityLevel", wireType)
			}
			m.SeverityLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeverityLevel |= SeverityLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= FindingStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Theorem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Theorem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Theorem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TheoremStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubmitTime == nil {
				m.SubmitTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.SubmitTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalGrant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalGrant = append(m.TotalGrant, types1.Coin{})
			if err := m.TotalGrant[len(m.TotalGrant)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheoremId", wireType)
			}
			m.TheoremId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TheoremId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProofStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubmitTime == nil {
				m.SubmitTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.SubmitTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = append(m.Deposit, types1.Coin{})
			if err := m.Deposit[len(m.Deposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProofHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProofHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProofHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheoremId", wireType)
			}
			m.TheoremId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TheoremId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Grant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Grant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Grant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheoremId", wireType)
			}
			m.TheoremId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TheoremId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types1.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types1.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGrant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinGrant = append(m.MinGrant, types1.Coin{})
			if err := m.MinGrant[len(m.MinGrant)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinDeposit = append(m.MinDeposit, types1.Coin{})
			if err := m.MinDeposit[len(m.MinDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheoremMaxProofPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TheoremMaxProofPeriod == nil {
				m.TheoremMaxProofPeriod = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.TheoremMaxProofPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofMaxLockPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofMaxLockPeriod == nil {
				m.ProofMaxLockPeriod = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.ProofMaxLockPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckerRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CheckerRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, types1.DecCoin{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBounty(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBounty
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBounty
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBounty
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBounty        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBounty          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBounty = fmt.Errorf("proto: unexpected end of group")
)
