// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/bounty/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryHostsRequest is the request type for the Query/Hosts RPC method.
type QueryHostsRequest struct {
}

func (m *QueryHostsRequest) Reset()         { *m = QueryHostsRequest{} }
func (m *QueryHostsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHostsRequest) ProtoMessage()    {}
func (*QueryHostsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{0}
}
func (m *QueryHostsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostsRequest.Merge(m, src)
}
func (m *QueryHostsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostsRequest proto.InternalMessageInfo

// QueryHostsResponse is the response type for the Query/Hosts RPC method.
type QueryHostsResponse struct {
}

func (m *QueryHostsResponse) Reset()         { *m = QueryHostsResponse{} }
func (m *QueryHostsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHostsResponse) ProtoMessage()    {}
func (*QueryHostsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{1}
}
func (m *QueryHostsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostsResponse.Merge(m, src)
}
func (m *QueryHostsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostsResponse proto.InternalMessageInfo

// QueryHostRequest is the request type for the Query/Host RPC method.
type QueryHostRequest struct {
	// host_addr defines the host address to query for.
	HostAddr string `protobuf:"bytes,1,opt,name=host_addr,json=hostAddr,proto3" json:"host_addr,omitempty"`
}

func (m *QueryHostRequest) Reset()         { *m = QueryHostRequest{} }
func (m *QueryHostRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHostRequest) ProtoMessage()    {}
func (*QueryHostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{2}
}
func (m *QueryHostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostRequest.Merge(m, src)
}
func (m *QueryHostRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostRequest proto.InternalMessageInfo

func (m *QueryHostRequest) GetHostAddr() string {
	if m != nil {
		return m.HostAddr
	}
	return ""
}

// QueryHostResponse is the response type for the Query/Host RPC method.
type QueryHostResponse struct {
}

func (m *QueryHostResponse) Reset()         { *m = QueryHostResponse{} }
func (m *QueryHostResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHostResponse) ProtoMessage()    {}
func (*QueryHostResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{3}
}
func (m *QueryHostResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostResponse.Merge(m, src)
}
func (m *QueryHostResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostResponse proto.InternalMessageInfo

// QueryProgramsRequest is the request type for the Query/Programs RPC method.
type QueryProgramsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryProgramsRequest) Reset()         { *m = QueryProgramsRequest{} }
func (m *QueryProgramsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProgramsRequest) ProtoMessage()    {}
func (*QueryProgramsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{4}
}
func (m *QueryProgramsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProgramsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProgramsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProgramsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProgramsRequest.Merge(m, src)
}
func (m *QueryProgramsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProgramsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProgramsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProgramsRequest proto.InternalMessageInfo

func (m *QueryProgramsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryProgramsResponse is the response type for the Query/Programs RPC method.
type QueryProgramsResponse struct {
	Programs []Program `protobuf:"bytes,1,rep,name=programs,proto3" json:"programs"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryProgramsResponse) Reset()         { *m = QueryProgramsResponse{} }
func (m *QueryProgramsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProgramsResponse) ProtoMessage()    {}
func (*QueryProgramsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{5}
}
func (m *QueryProgramsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProgramsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProgramsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProgramsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProgramsResponse.Merge(m, src)
}
func (m *QueryProgramsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProgramsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProgramsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProgramsResponse proto.InternalMessageInfo

func (m *QueryProgramsResponse) GetPrograms() []Program {
	if m != nil {
		return m.Programs
	}
	return nil
}

func (m *QueryProgramsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryProgramRequest is the request type for the Query/Program RPC method.
type QueryProgramRequest struct {
	// program_id defines the unique id of the bounty program.
	ProgramId string `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
}

func (m *QueryProgramRequest) Reset()         { *m = QueryProgramRequest{} }
func (m *QueryProgramRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProgramRequest) ProtoMessage()    {}
func (*QueryProgramRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{6}
}
func (m *QueryProgramRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProgramRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProgramRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProgramRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProgramRequest.Merge(m, src)
}
func (m *QueryProgramRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProgramRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProgramRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProgramRequest proto.InternalMessageInfo

func (m *QueryProgramRequest) GetProgramId() string {
	if m != nil {
		return m.ProgramId
	}
	return ""
}

// QueryProgramResponse is the response type for the Query/Program RPC method.
type QueryProgramResponse struct {
	Program Program `protobuf:"bytes,1,opt,name=program,proto3" json:"program"`
}

func (m *QueryProgramResponse) Reset()         { *m = QueryProgramResponse{} }
func (m *QueryProgramResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProgramResponse) ProtoMessage()    {}
func (*QueryProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{7}
}
func (m *QueryProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProgramResponse.Merge(m, src)
}
func (m *QueryProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProgramResponse proto.InternalMessageInfo

func (m *QueryProgramResponse) GetProgram() Program {
	if m != nil {
		return m.Program
	}
	return Program{}
}

// QueryFindingRequests is the request type for the Query/Findings RPC method.
type QueryFindingsRequest struct {
	// program_id defines the unique id of the program.
	ProgramId string `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	// submitter_address defines the find address for the finding.
	SubmitterAddress string `protobuf:"bytes,2,opt,name=submitter_address,json=submitterAddress,proto3" json:"submitter_address,omitempty"`
	// pagination defines the pagination in the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFindingsRequest) Reset()         { *m = QueryFindingsRequest{} }
func (m *QueryFindingsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFindingsRequest) ProtoMessage()    {}
func (*QueryFindingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{8}
}
func (m *QueryFindingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFindingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFindingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFindingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFindingsRequest.Merge(m, src)
}
func (m *QueryFindingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFindingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFindingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFindingsRequest proto.InternalMessageInfo

func (m *QueryFindingsRequest) GetProgramId() string {
	if m != nil {
		return m.ProgramId
	}
	return ""
}

func (m *QueryFindingsRequest) GetSubmitterAddress() string {
	if m != nil {
		return m.SubmitterAddress
	}
	return ""
}

func (m *QueryFindingsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryFindingsResponse is the response type for the Query/Findings RPC method.
type QueryFindingsResponse struct {
	Findings []Finding `protobuf:"bytes,1,rep,name=findings,proto3" json:"findings"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFindingsResponse) Reset()         { *m = QueryFindingsResponse{} }
func (m *QueryFindingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFindingsResponse) ProtoMessage()    {}
func (*QueryFindingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{9}
}
func (m *QueryFindingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFindingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFindingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFindingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFindingsResponse.Merge(m, src)
}
func (m *QueryFindingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFindingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFindingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFindingsResponse proto.InternalMessageInfo

func (m *QueryFindingsResponse) GetFindings() []Finding {
	if m != nil {
		return m.Findings
	}
	return nil
}

func (m *QueryFindingsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryFindingRequest is the request type for the Query/Finding RPC method.
type QueryFindingRequest struct {
	// finding_id defines the unique id of the finding.
	FindingId string `protobuf:"bytes,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty"`
}

func (m *QueryFindingRequest) Reset()         { *m = QueryFindingRequest{} }
func (m *QueryFindingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFindingRequest) ProtoMessage()    {}
func (*QueryFindingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{10}
}
func (m *QueryFindingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFindingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFindingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFindingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFindingRequest.Merge(m, src)
}
func (m *QueryFindingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFindingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFindingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFindingRequest proto.InternalMessageInfo

func (m *QueryFindingRequest) GetFindingId() string {
	if m != nil {
		return m.FindingId
	}
	return ""
}

// QueryFindingResponse is the response type for the Query/Finding RPC method.
type QueryFindingResponse struct {
	Finding Finding `protobuf:"bytes,1,opt,name=finding,proto3" json:"finding"`
}

func (m *QueryFindingResponse) Reset()         { *m = QueryFindingResponse{} }
func (m *QueryFindingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFindingResponse) ProtoMessage()    {}
func (*QueryFindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{11}
}
func (m *QueryFindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFindingResponse.Merge(m, src)
}
func (m *QueryFindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFindingResponse proto.InternalMessageInfo

func (m *QueryFindingResponse) GetFinding() Finding {
	if m != nil {
		return m.Finding
	}
	return Finding{}
}

// QueryFindingFingerPrint is the request type for the Query/Finding RPC method.
type QueryFindingFingerprintRequest struct {
	// finding_id defines the unique id of the finding.
	FindingId string `protobuf:"bytes,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty"`
}

func (m *QueryFindingFingerprintRequest) Reset()         { *m = QueryFindingFingerprintRequest{} }
func (m *QueryFindingFingerprintRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFindingFingerprintRequest) ProtoMessage()    {}
func (*QueryFindingFingerprintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{12}
}
func (m *QueryFindingFingerprintRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFindingFingerprintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFindingFingerprintRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFindingFingerprintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFindingFingerprintRequest.Merge(m, src)
}
func (m *QueryFindingFingerprintRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFindingFingerprintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFindingFingerprintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFindingFingerprintRequest proto.InternalMessageInfo

func (m *QueryFindingFingerprintRequest) GetFindingId() string {
	if m != nil {
		return m.FindingId
	}
	return ""
}

// QueryFindingFingerPrintResponse is the response type for the Query/Finding RPC method.
type QueryFindingFingerprintResponse struct {
	Fingerprint string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (m *QueryFindingFingerprintResponse) Reset()         { *m = QueryFindingFingerprintResponse{} }
func (m *QueryFindingFingerprintResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFindingFingerprintResponse) ProtoMessage()    {}
func (*QueryFindingFingerprintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{13}
}
func (m *QueryFindingFingerprintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFindingFingerprintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFindingFingerprintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFindingFingerprintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFindingFingerprintResponse.Merge(m, src)
}
func (m *QueryFindingFingerprintResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFindingFingerprintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFindingFingerprintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFindingFingerprintResponse proto.InternalMessageInfo

func (m *QueryFindingFingerprintResponse) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

// QueryProgramFingerprintRequest is the request type for the Query/Finding RPC method.
type QueryProgramFingerprintRequest struct {
	// program_id defines the unique id of the finding.
	ProgramId string `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
}

func (m *QueryProgramFingerprintRequest) Reset()         { *m = QueryProgramFingerprintRequest{} }
func (m *QueryProgramFingerprintRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProgramFingerprintRequest) ProtoMessage()    {}
func (*QueryProgramFingerprintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{14}
}
func (m *QueryProgramFingerprintRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProgramFingerprintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProgramFingerprintRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProgramFingerprintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProgramFingerprintRequest.Merge(m, src)
}
func (m *QueryProgramFingerprintRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProgramFingerprintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProgramFingerprintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProgramFingerprintRequest proto.InternalMessageInfo

func (m *QueryProgramFingerprintRequest) GetProgramId() string {
	if m != nil {
		return m.ProgramId
	}
	return ""
}

// QueryProgramFingerprintResponse is the response type for the Query/Finding RPC method.
type QueryProgramFingerprintResponse struct {
	Fingerprint string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (m *QueryProgramFingerprintResponse) Reset()         { *m = QueryProgramFingerprintResponse{} }
func (m *QueryProgramFingerprintResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProgramFingerprintResponse) ProtoMessage()    {}
func (*QueryProgramFingerprintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{15}
}
func (m *QueryProgramFingerprintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProgramFingerprintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProgramFingerprintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProgramFingerprintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProgramFingerprintResponse.Merge(m, src)
}
func (m *QueryProgramFingerprintResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProgramFingerprintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProgramFingerprintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProgramFingerprintResponse proto.InternalMessageInfo

func (m *QueryProgramFingerprintResponse) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

// QueryTheoremsRequest is the request type for the Query/Theorems RPC method.
type QueryTheoremsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTheoremsRequest) Reset()         { *m = QueryTheoremsRequest{} }
func (m *QueryTheoremsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTheoremsRequest) ProtoMessage()    {}
func (*QueryTheoremsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{16}
}
func (m *QueryTheoremsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTheoremsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTheoremsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTheoremsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTheoremsRequest.Merge(m, src)
}
func (m *QueryTheoremsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTheoremsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTheoremsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTheoremsRequest proto.InternalMessageInfo

func (m *QueryTheoremsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTheoremsResponse is the response type for the Query/Theorems RPC method.
type QueryTheoremsResponse struct {
	Theorems []Theorem `protobuf:"bytes,1,rep,name=theorems,proto3" json:"theorems"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTheoremsResponse) Reset()         { *m = QueryTheoremsResponse{} }
func (m *QueryTheoremsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTheoremsResponse) ProtoMessage()    {}
func (*QueryTheoremsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{17}
}
func (m *QueryTheoremsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTheoremsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTheoremsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTheoremsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTheoremsResponse.Merge(m, src)
}
func (m *QueryTheoremsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTheoremsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTheoremsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTheoremsResponse proto.InternalMessageInfo

func (m *QueryTheoremsResponse) GetTheorems() []Theorem {
	if m != nil {
		return m.Theorems
	}
	return nil
}

func (m *QueryTheoremsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTheoremRequest is the request type for the Query/Theorem RPC method.
type QueryTheoremRequest struct {
	// theorem_id defines the unique id of the theorem.
	TheoremId uint64 `protobuf:"varint,1,opt,name=theorem_id,json=theoremId,proto3" json:"theorem_id,omitempty"`
}

func (m *QueryTheoremRequest) Reset()         { *m = QueryTheoremRequest{} }
func (m *QueryTheoremRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTheoremRequest) ProtoMessage()    {}
func (*QueryTheoremRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{18}
}
func (m *QueryTheoremRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTheoremRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTheoremRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTheoremRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTheoremRequest.Merge(m, src)
}
func (m *QueryTheoremRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTheoremRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTheoremRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTheoremRequest proto.InternalMessageInfo

func (m *QueryTheoremRequest) GetTheoremId() uint64 {
	if m != nil {
		return m.TheoremId
	}
	return 0
}

// QueryTheoremResponse is the response type for the Query/Theorem RPC method.
type QueryTheoremResponse struct {
	Theorem Theorem `protobuf:"bytes,1,opt,name=theorem,proto3" json:"theorem"`
}

func (m *QueryTheoremResponse) Reset()         { *m = QueryTheoremResponse{} }
func (m *QueryTheoremResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTheoremResponse) ProtoMessage()    {}
func (*QueryTheoremResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{19}
}
func (m *QueryTheoremResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTheoremResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTheoremResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTheoremResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTheoremResponse.Merge(m, src)
}
func (m *QueryTheoremResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTheoremResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTheoremResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTheoremResponse proto.InternalMessageInfo

func (m *QueryTheoremResponse) GetTheorem() Theorem {
	if m != nil {
		return m.Theorem
	}
	return Theorem{}
}

// QueryProofRequest is the request type for the Query/Proof RPC method.
type QueryProofRequest struct {
	// proof_id defines the unique id of the proof.
	ProofId string `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
}

func (m *QueryProofRequest) Reset()         { *m = QueryProofRequest{} }
func (m *QueryProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProofRequest) ProtoMessage()    {}
func (*QueryProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{20}
}
func (m *QueryProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProofRequest.Merge(m, src)
}
func (m *QueryProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProofRequest proto.InternalMessageInfo

func (m *QueryProofRequest) GetProofId() string {
	if m != nil {
		return m.ProofId
	}
	return ""
}

// QueryProofResponse is the response type for the Query/Proof RPC method.
type QueryProofResponse struct {
	Proof Proof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof"`
}

func (m *QueryProofResponse) Reset()         { *m = QueryProofResponse{} }
func (m *QueryProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProofResponse) ProtoMessage()    {}
func (*QueryProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{21}
}
func (m *QueryProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProofResponse.Merge(m, src)
}
func (m *QueryProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProofResponse proto.InternalMessageInfo

func (m *QueryProofResponse) GetProof() Proof {
	if m != nil {
		return m.Proof
	}
	return Proof{}
}

// QueryRewardsRequest is the request type for the Query/Rewards RPC method.
type QueryRewardsRequest struct {
	// address defines the address to query for.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryRewardsRequest) Reset()         { *m = QueryRewardsRequest{} }
func (m *QueryRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsRequest) ProtoMessage()    {}
func (*QueryRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{22}
}
func (m *QueryRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsRequest.Merge(m, src)
}
func (m *QueryRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsRequest proto.InternalMessageInfo

// QueryRewardsResponse is the response type for the Query/Rewards RPC method.
type QueryRewardsResponse struct {
	Rewards github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"rewards"`
}

func (m *QueryRewardsResponse) Reset()         { *m = QueryRewardsResponse{} }
func (m *QueryRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsResponse) ProtoMessage()    {}
func (*QueryRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{23}
}
func (m *QueryRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsResponse.Merge(m, src)
}
func (m *QueryRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsResponse proto.InternalMessageInfo

func (m *QueryRewardsResponse) GetRewards() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// QueryParamsRequest defines the request type for querying x/bounty parameters.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{24}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse defines the response type for querying x/bounty parameters.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{25}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryHostsRequest)(nil), "shentu.bounty.v1.QueryHostsRequest")
	proto.RegisterType((*QueryHostsResponse)(nil), "shentu.bounty.v1.QueryHostsResponse")
	proto.RegisterType((*QueryHostRequest)(nil), "shentu.bounty.v1.QueryHostRequest")
	proto.RegisterType((*QueryHostResponse)(nil), "shentu.bounty.v1.QueryHostResponse")
	proto.RegisterType((*QueryProgramsRequest)(nil), "shentu.bounty.v1.QueryProgramsRequest")
	proto.RegisterType((*QueryProgramsResponse)(nil), "shentu.bounty.v1.QueryProgramsResponse")
	proto.RegisterType((*QueryProgramRequest)(nil), "shentu.bounty.v1.QueryProgramRequest")
	proto.RegisterType((*QueryProgramResponse)(nil), "shentu.bounty.v1.QueryProgramResponse")
	proto.RegisterType((*QueryFindingsRequest)(nil), "shentu.bounty.v1.QueryFindingsRequest")
	proto.RegisterType((*QueryFindingsResponse)(nil), "shentu.bounty.v1.QueryFindingsResponse")
	proto.RegisterType((*QueryFindingRequest)(nil), "shentu.bounty.v1.QueryFindingRequest")
	proto.RegisterType((*QueryFindingResponse)(nil), "shentu.bounty.v1.QueryFindingResponse")
	proto.RegisterType((*QueryFindingFingerprintRequest)(nil), "shentu.bounty.v1.QueryFindingFingerprintRequest")
	proto.RegisterType((*QueryFindingFingerprintResponse)(nil), "shentu.bounty.v1.QueryFindingFingerprintResponse")
	proto.RegisterType((*QueryProgramFingerprintRequest)(nil), "shentu.bounty.v1.QueryProgramFingerprintRequest")
	proto.RegisterType((*QueryProgramFingerprintResponse)(nil), "shentu.bounty.v1.QueryProgramFingerprintResponse")
	proto.RegisterType((*QueryTheoremsRequest)(nil), "shentu.bounty.v1.QueryTheoremsRequest")
	proto.RegisterType((*QueryTheoremsResponse)(nil), "shentu.bounty.v1.QueryTheoremsResponse")
	proto.RegisterType((*QueryTheoremRequest)(nil), "shentu.bounty.v1.QueryTheoremRequest")
	proto.RegisterType((*QueryTheoremResponse)(nil), "shentu.bounty.v1.QueryTheoremResponse")
	proto.RegisterType((*QueryProofRequest)(nil), "shentu.bounty.v1.QueryProofRequest")
	proto.RegisterType((*QueryProofResponse)(nil), "shentu.bounty.v1.QueryProofResponse")
	proto.RegisterType((*QueryRewardsRequest)(nil), "shentu.bounty.v1.QueryRewardsRequest")
	proto.RegisterType((*QueryRewardsResponse)(nil), "shentu.bounty.v1.QueryRewardsResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "shentu.bounty.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "shentu.bounty.v1.QueryParamsResponse")
}

func init() { proto.RegisterFile("shentu/bounty/v1/query.proto", fileDescriptor_31c92d65cbd97e4b) }

var fileDescriptor_31c92d65cbd97e4b = []byte{
	// 1111 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xb6, 0x4d, 0x6c, 0x4f, 0x38, 0x24, 0xd3, 0x20, 0x9c, 0x25, 0xb5, 0xa3, 0x2d, 0x71,
	0x4a, 0xa3, 0xee, 0xe0, 0x04, 0x10, 0xd0, 0x03, 0x6a, 0x8a, 0x02, 0x11, 0x42, 0x4a, 0x5d, 0x4e,
	0x1c, 0x88, 0xd6, 0xd9, 0xf1, 0x66, 0x05, 0xde, 0xd9, 0xee, 0xac, 0x53, 0xa2, 0x28, 0xaa, 0x84,
	0x38, 0x94, 0x1b, 0x12, 0x67, 0xa4, 0x72, 0x43, 0x3d, 0x71, 0x40, 0xfc, 0x0d, 0x3d, 0x56, 0x70,
	0xe1, 0x04, 0x28, 0x41, 0x82, 0x3f, 0x03, 0xed, 0xcc, 0x9b, 0xfd, 0x61, 0x7b, 0xbc, 0x41, 0xb4,
	0x97, 0x24, 0x7e, 0xf3, 0x7e, 0x7c, 0xf3, 0xbd, 0xe7, 0xf7, 0x4d, 0xd0, 0x32, 0x3f, 0xa0, 0x41,
	0x3c, 0x24, 0x3d, 0x36, 0x0c, 0xe2, 0x23, 0x72, 0xd8, 0x21, 0xf7, 0x86, 0x34, 0x3a, 0xb2, 0xc3,
	0x88, 0xc5, 0x0c, 0xcf, 0xcb, 0x53, 0x5b, 0x9e, 0xda, 0x87, 0x1d, 0x73, 0xd1, 0x63, 0x1e, 0x13,
	0x87, 0x24, 0xf9, 0x4b, 0xfa, 0x99, 0xcb, 0x1e, 0x63, 0xde, 0xe7, 0x94, 0x38, 0xa1, 0x4f, 0x9c,
	0x20, 0x60, 0xb1, 0x13, 0xfb, 0x2c, 0xe0, 0x70, 0xba, 0xb4, 0xcf, 0xf8, 0x80, 0xf1, 0x3d, 0x19,
	0x26, 0x3f, 0xc0, 0xd1, 0x82, 0x33, 0xf0, 0x03, 0x46, 0xc4, 0x4f, 0x30, 0x35, 0xa5, 0x03, 0xe9,
	0x39, 0x9c, 0x92, 0xc3, 0x4e, 0x8f, 0xc6, 0x4e, 0x87, 0xec, 0x33, 0x3f, 0x80, 0xf3, 0xeb, 0xf9,
	0x73, 0x01, 0x36, 0xf5, 0x0a, 0x1d, 0xcf, 0x0f, 0x44, 0x69, 0xf0, 0xbd, 0x32, 0x76, 0x3b, 0xb8,
	0x89, 0x38, 0xb6, 0x2e, 0xa3, 0x85, 0x3b, 0x49, 0x82, 0x0f, 0x18, 0x8f, 0x79, 0x97, 0xde, 0x1b,
	0x52, 0x1e, 0x5b, 0x8b, 0x08, 0xe7, 0x8d, 0x3c, 0x64, 0x01, 0xa7, 0x16, 0x41, 0xf3, 0xa9, 0x15,
	0x3c, 0xf1, 0xcb, 0xa8, 0x7e, 0xc0, 0x78, 0xbc, 0xe7, 0xb8, 0x6e, 0xd4, 0x30, 0x56, 0x8c, 0x6b,
	0xf5, 0x6e, 0x2d, 0x31, 0xdc, 0x72, 0xdd, 0xa8, 0x90, 0x3b, 0xcd, 0xf2, 0x29, 0x5a, 0x14, 0xc6,
	0xdd, 0x88, 0x79, 0x91, 0x33, 0x50, 0x35, 0xf1, 0x36, 0x42, 0x19, 0x76, 0x91, 0x6a, 0x6e, 0xa3,
	0x6d, 0x03, 0x53, 0xc9, 0x45, 0x6d, 0xd9, 0x15, 0xb8, 0xa8, 0xbd, 0xeb, 0x78, 0x14, 0x62, 0xbb,
	0xb9, 0x48, 0xeb, 0x3b, 0x03, 0xbd, 0x38, 0x52, 0x40, 0x56, 0xc6, 0x37, 0x51, 0x2d, 0x04, 0x5b,
	0xc3, 0x58, 0xb9, 0x78, 0x6d, 0x6e, 0x63, 0xc9, 0x1e, 0x6d, 0xae, 0x0d, 0x51, 0x5b, 0x97, 0x9e,
	0xfc, 0xde, 0xaa, 0x74, 0xd3, 0x00, 0xfc, 0x7e, 0x01, 0xde, 0x05, 0x01, 0x6f, 0xad, 0x14, 0x9e,
	0xac, 0x5c, 0xc0, 0xf7, 0x3a, 0xba, 0x9c, 0x87, 0xa7, 0xae, 0x7f, 0x05, 0x21, 0xa8, 0xb5, 0xe7,
	0xbb, 0xc0, 0x64, 0x1d, 0x2c, 0x3b, 0xae, 0x75, 0xa7, 0xc8, 0x5a, 0x7a, 0xa7, 0xb7, 0x51, 0x15,
	0x9c, 0x80, 0xb2, 0xd2, 0x2b, 0x29, 0x7f, 0xeb, 0xb1, 0x01, 0x39, 0xb7, 0xfd, 0xc0, 0xf5, 0x03,
	0x8f, 0x9f, 0x0f, 0x0a, 0x5e, 0x47, 0x0b, 0x7c, 0xd8, 0x1b, 0xf8, 0x71, 0x4c, 0x23, 0xd1, 0x77,
	0xca, 0xb9, 0x20, 0xa4, 0xde, 0x9d, 0x4f, 0x0f, 0x6e, 0x49, 0xfb, 0x48, 0x57, 0x2f, 0xfe, 0xff,
	0xae, 0x66, 0x60, 0xb3, 0xae, 0xf6, 0xc1, 0xa6, 0xef, 0x2a, 0x44, 0xa9, 0xae, 0xaa, 0x80, 0x67,
	0xdf, 0x55, 0x28, 0x94, 0xa3, 0x12, 0x6a, 0xe5, 0xa8, 0x04, 0x4b, 0xae, 0xab, 0x69, 0x54, 0xd6,
	0x55, 0x70, 0xd2, 0x77, 0xb5, 0x78, 0x25, 0xe5, 0x6f, 0xbd, 0x8b, 0x9a, 0xf9, 0x94, 0xdb, 0x7e,
	0xe0, 0xd1, 0x28, 0x8c, 0xfc, 0x20, 0x3e, 0x27, 0xa6, 0xdb, 0xa8, 0xa5, 0x4d, 0x00, 0xf0, 0x56,
	0xd0, 0x5c, 0x3f, 0x33, 0x43, 0x8a, 0xbc, 0x29, 0x45, 0x01, 0xa3, 0x37, 0x19, 0xc5, 0xb4, 0x79,
	0x57, 0x28, 0x26, 0x25, 0x38, 0x37, 0x0a, 0xb5, 0x6a, 0x3e, 0x3e, 0xa0, 0x2c, 0xa2, 0xcf, 0x71,
	0xd5, 0x64, 0x05, 0xb2, 0xa1, 0x8c, 0xc1, 0xa6, 0x1f, 0x4a, 0x88, 0x52, 0x43, 0xa9, 0x02, 0x9e,
	0xfd, 0x50, 0x42, 0xa1, 0x1c, 0xf5, 0x50, 0x4b, 0x51, 0x7f, 0xa9, 0x5b, 0x07, 0x4b, 0x6e, 0x28,
	0xd3, 0xa8, 0x6c, 0x28, 0xc1, 0x49, 0x3f, 0x94, 0xc5, 0x2b, 0x29, 0x7f, 0xcb, 0x06, 0x21, 0xd8,
	0x8d, 0x18, 0xeb, 0x2b, 0x18, 0x4b, 0x62, 0x1d, 0xb3, 0x7e, 0xd6, 0xff, 0xaa, 0xf8, 0xbc, 0xe3,
	0x5a, 0x3b, 0xa0, 0x3f, 0xe0, 0x0f, 0x00, 0x36, 0xd1, 0x8c, 0x70, 0x80, 0xf2, 0x2f, 0x4d, 0xdc,
	0x74, 0xac, 0x0f, 0xc5, 0xa5, 0xaf, 0x75, 0x17, 0x38, 0xe8, 0xd2, 0xfb, 0x4e, 0xe4, 0xa6, 0x23,
	0xb0, 0x81, 0xaa, 0x6a, 0x75, 0x89, 0xda, 0x5b, 0x8d, 0x5f, 0x7e, 0xba, 0xb1, 0x08, 0x1c, 0xc3,
	0xf2, 0xba, 0x1b, 0x47, 0xc9, 0x97, 0x52, 0x39, 0xbe, 0x53, 0x7b, 0xf8, 0xa8, 0x55, 0xf9, 0xe7,
	0x51, 0xab, 0x62, 0x3d, 0x54, 0xab, 0x33, 0xcd, 0x0a, 0x10, 0x43, 0x54, 0x8d, 0xa4, 0x09, 0xda,
	0xbe, 0x5c, 0xe8, 0x9b, 0xea, 0xd8, 0x7b, 0x74, 0xff, 0x36, 0xf3, 0x83, 0xad, 0xb7, 0x12, 0xa4,
	0x8f, 0xff, 0x68, 0xad, 0x7b, 0x7e, 0x7c, 0x30, 0xec, 0xd9, 0xfb, 0x6c, 0x00, 0x6f, 0x03, 0xf8,
	0x75, 0x83, 0xbb, 0x9f, 0x91, 0xf8, 0x28, 0xa4, 0x5c, 0xc5, 0xf0, 0x1f, 0xfe, 0xfe, 0xf1, 0xba,
	0xd1, 0x55, 0x65, 0x52, 0xa9, 0xde, 0x75, 0x72, 0x62, 0x6a, 0x7d, 0xa4, 0x44, 0xc6, 0x29, 0x28,
	0xe0, 0x9b, 0x68, 0x36, 0x74, 0x40, 0xff, 0x12, 0x0a, 0x1b, 0x13, 0x28, 0x14, 0xe7, 0xc0, 0x21,
	0x78, 0x6f, 0x7c, 0xff, 0x02, 0x9a, 0x11, 0xf9, 0xf0, 0x03, 0x54, 0x53, 0xba, 0x8a, 0xdb, 0xe3,
	0xd1, 0x93, 0x94, 0xdd, 0x5c, 0x2b, 0xf5, 0x83, 0xa7, 0x81, 0xf5, 0xe5, 0xaf, 0x7f, 0x7d, 0x7b,
	0x61, 0x19, 0x9b, 0x64, 0xec, 0xcd, 0x92, 0xea, 0xf0, 0xd7, 0x06, 0xaa, 0x42, 0x20, 0x5e, 0x9d,
	0x9e, 0x58, 0xd5, 0x6f, 0x97, 0xb9, 0xa9, 0xf7, 0x8d, 0x28, 0xff, 0x2a, 0x5e, 0xd3, 0x97, 0x27,
	0xc7, 0xd9, 0xd2, 0x3a, 0x49, 0xc8, 0x50, 0x72, 0xa4, 0x25, 0x63, 0x44, 0x5c, 0xb5, 0x64, 0x8c,
	0xea, 0xda, 0x34, 0x32, 0x52, 0xf9, 0x4a, 0xc8, 0x80, 0x40, 0x2d, 0x19, 0x45, 0x45, 0x32, 0xdb,
	0x65, 0x6e, 0xe5, 0x64, 0xa8, 0xf2, 0xe4, 0x38, 0xd3, 0x91, 0x13, 0xfc, 0xb3, 0x81, 0xf0, 0xb8,
	0x66, 0xe0, 0xd7, 0xa6, 0xd7, 0x1b, 0x57, 0x06, 0xb3, 0xf3, 0x1f, 0x22, 0x00, 0xec, 0x4d, 0x01,
	0xf6, 0x0d, 0xbc, 0x79, 0x4e, 0xb0, 0x24, 0xa7, 0x12, 0x02, 0xf8, 0xb8, 0xcc, 0x68, 0x81, 0x6b,
	0x25, 0x4d, 0x0b, 0x5c, 0xaf, 0x61, 0xd3, 0x80, 0x4f, 0x1c, 0xb9, 0x02, 0xf0, 0x07, 0xa8, 0xa6,
	0x84, 0x47, 0x3b, 0x7e, 0x23, 0xd2, 0xa7, 0x1d, 0xbf, 0x51, 0x05, 0x9b, 0x36, 0x7e, 0xa9, 0x50,
	0x25, 0xe3, 0x07, 0x81, 0xda, 0xf1, 0x2b, 0x6a, 0x8f, 0xd9, 0x2e, 0x73, 0x2b, 0x1f, 0x3f, 0x55,
	0x9e, 0x1c, 0x67, 0x2a, 0x96, 0x7c, 0x17, 0x67, 0xc4, 0xf6, 0xc7, 0x57, 0xf5, 0x5d, 0x48, 0xb5,
	0xc7, 0x7c, 0x65, 0xba, 0x13, 0x80, 0x58, 0x17, 0x20, 0x56, 0xf1, 0xd5, 0x89, 0xdd, 0x61, 0x7d,
	0xd9, 0x1b, 0xa1, 0x60, 0x27, 0xf8, 0x2b, 0x03, 0xcd, 0x4a, 0x39, 0xd0, 0x72, 0x51, 0xd4, 0x20,
	0x2d, 0x17, 0x23, 0xa2, 0x32, 0x0d, 0x06, 0xa8, 0x00, 0x39, 0x06, 0x8d, 0x3a, 0xc1, 0xf7, 0xd1,
	0xac, 0x5c, 0xe1, 0x58, 0x7b, 0xc7, 0xbc, 0x52, 0x98, 0xab, 0x25, 0x5e, 0x80, 0x61, 0x45, 0x60,
	0x30, 0x71, 0x63, 0x02, 0x15, 0x52, 0x31, 0x3e, 0x7c, 0x72, 0xda, 0x34, 0x9e, 0x9e, 0x36, 0x8d,
	0x3f, 0x4f, 0x9b, 0xc6, 0x37, 0x67, 0xcd, 0xca, 0xd3, 0xb3, 0x66, 0xe5, 0xb7, 0xb3, 0x66, 0xe5,
	0x93, 0x4e, 0x4e, 0xdd, 0x64, 0x74, 0x9f, 0x0d, 0x03, 0x57, 0xbc, 0x51, 0x54, 0xba, 0x2f, 0x54,
	0x42, 0x21, 0x76, 0xbd, 0x59, 0xf1, 0xcf, 0xe9, 0xe6, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x02,
	0x3d, 0x84, 0xd3, 0x9b, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Programs queries all programs based on given status.
	Programs(ctx context.Context, in *QueryProgramsRequest, opts ...grpc.CallOption) (*QueryProgramsResponse, error)
	// Program queries program details based on ProgramId.
	Program(ctx context.Context, in *QueryProgramRequest, opts ...grpc.CallOption) (*QueryProgramResponse, error)
	// Findings queries findings of a given program.
	Findings(ctx context.Context, in *QueryFindingsRequest, opts ...grpc.CallOption) (*QueryFindingsResponse, error)
	// Finding queries Finding information based on programID, FindingId.
	Finding(ctx context.Context, in *QueryFindingRequest, opts ...grpc.CallOption) (*QueryFindingResponse, error)
	// FindingFingerprint queries finding fingerprint based on findingId.
	FindingFingerprint(ctx context.Context, in *QueryFindingFingerprintRequest, opts ...grpc.CallOption) (*QueryFindingFingerprintResponse, error)
	// ProgramFingerprint queries program fingerprint based on programId.
	ProgramFingerprint(ctx context.Context, in *QueryProgramFingerprintRequest, opts ...grpc.CallOption) (*QueryProgramFingerprintResponse, error)
	// Theorems queries all theorems based on given status.
	Theorems(ctx context.Context, in *QueryTheoremsRequest, opts ...grpc.CallOption) (*QueryTheoremsResponse, error)
	// Theorem queries theorem details based on theoremID.
	Theorem(ctx context.Context, in *QueryTheoremRequest, opts ...grpc.CallOption) (*QueryTheoremResponse, error)
	// Proof queries proof details based on proofID.
	Proof(ctx context.Context, in *QueryProofRequest, opts ...grpc.CallOption) (*QueryProofResponse, error)
	// Reward queries reward details based on address.
	Reward(ctx context.Context, in *QueryRewardsRequest, opts ...grpc.CallOption) (*QueryRewardsResponse, error)
	// Params queries the bounty module parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Programs(ctx context.Context, in *QueryProgramsRequest, opts ...grpc.CallOption) (*QueryProgramsResponse, error) {
	out := new(QueryProgramsResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/Programs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Program(ctx context.Context, in *QueryProgramRequest, opts ...grpc.CallOption) (*QueryProgramResponse, error) {
	out := new(QueryProgramResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/Program", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Findings(ctx context.Context, in *QueryFindingsRequest, opts ...grpc.CallOption) (*QueryFindingsResponse, error) {
	out := new(QueryFindingsResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/Findings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Finding(ctx context.Context, in *QueryFindingRequest, opts ...grpc.CallOption) (*QueryFindingResponse, error) {
	out := new(QueryFindingResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/Finding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FindingFingerprint(ctx context.Context, in *QueryFindingFingerprintRequest, opts ...grpc.CallOption) (*QueryFindingFingerprintResponse, error) {
	out := new(QueryFindingFingerprintResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/FindingFingerprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProgramFingerprint(ctx context.Context, in *QueryProgramFingerprintRequest, opts ...grpc.CallOption) (*QueryProgramFingerprintResponse, error) {
	out := new(QueryProgramFingerprintResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/ProgramFingerprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Theorems(ctx context.Context, in *QueryTheoremsRequest, opts ...grpc.CallOption) (*QueryTheoremsResponse, error) {
	out := new(QueryTheoremsResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/Theorems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Theorem(ctx context.Context, in *QueryTheoremRequest, opts ...grpc.CallOption) (*QueryTheoremResponse, error) {
	out := new(QueryTheoremResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/Theorem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Proof(ctx context.Context, in *QueryProofRequest, opts ...grpc.CallOption) (*QueryProofResponse, error) {
	out := new(QueryProofResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/Proof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reward(ctx context.Context, in *QueryRewardsRequest, opts ...grpc.CallOption) (*QueryRewardsResponse, error) {
	out := new(QueryRewardsResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/Reward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Programs queries all programs based on given status.
	Programs(context.Context, *QueryProgramsRequest) (*QueryProgramsResponse, error)
	// Program queries program details based on ProgramId.
	Program(context.Context, *QueryProgramRequest) (*QueryProgramResponse, error)
	// Findings queries findings of a given program.
	Findings(context.Context, *QueryFindingsRequest) (*QueryFindingsResponse, error)
	// Finding queries Finding information based on programID, FindingId.
	Finding(context.Context, *QueryFindingRequest) (*QueryFindingResponse, error)
	// FindingFingerprint queries finding fingerprint based on findingId.
	FindingFingerprint(context.Context, *QueryFindingFingerprintRequest) (*QueryFindingFingerprintResponse, error)
	// ProgramFingerprint queries program fingerprint based on programId.
	ProgramFingerprint(context.Context, *QueryProgramFingerprintRequest) (*QueryProgramFingerprintResponse, error)
	// Theorems queries all theorems based on given status.
	Theorems(context.Context, *QueryTheoremsRequest) (*QueryTheoremsResponse, error)
	// Theorem queries theorem details based on theoremID.
	Theorem(context.Context, *QueryTheoremRequest) (*QueryTheoremResponse, error)
	// Proof queries proof details based on proofID.
	Proof(context.Context, *QueryProofRequest) (*QueryProofResponse, error)
	// Reward queries reward details based on address.
	Reward(context.Context, *QueryRewardsRequest) (*QueryRewardsResponse, error)
	// Params queries the bounty module parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Programs(ctx context.Context, req *QueryProgramsRequest) (*QueryProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Programs not implemented")
}
func (*UnimplementedQueryServer) Program(ctx context.Context, req *QueryProgramRequest) (*QueryProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Program not implemented")
}
func (*UnimplementedQueryServer) Findings(ctx context.Context, req *QueryFindingsRequest) (*QueryFindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Findings not implemented")
}
func (*UnimplementedQueryServer) Finding(ctx context.Context, req *QueryFindingRequest) (*QueryFindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finding not implemented")
}
func (*UnimplementedQueryServer) FindingFingerprint(ctx context.Context, req *QueryFindingFingerprintRequest) (*QueryFindingFingerprintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindingFingerprint not implemented")
}
func (*UnimplementedQueryServer) ProgramFingerprint(ctx context.Context, req *QueryProgramFingerprintRequest) (*QueryProgramFingerprintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgramFingerprint not implemented")
}
func (*UnimplementedQueryServer) Theorems(ctx context.Context, req *QueryTheoremsRequest) (*QueryTheoremsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Theorems not implemented")
}
func (*UnimplementedQueryServer) Theorem(ctx context.Context, req *QueryTheoremRequest) (*QueryTheoremResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Theorem not implemented")
}
func (*UnimplementedQueryServer) Proof(ctx context.Context, req *QueryProofRequest) (*QueryProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proof not implemented")
}
func (*UnimplementedQueryServer) Reward(ctx context.Context, req *QueryRewardsRequest) (*QueryRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reward not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Programs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProgramsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Programs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/Programs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Programs(ctx, req.(*QueryProgramsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Program_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Program(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/Program",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Program(ctx, req.(*QueryProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Findings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Findings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/Findings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Findings(ctx, req.(*QueryFindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Finding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Finding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/Finding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Finding(ctx, req.(*QueryFindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FindingFingerprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFindingFingerprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FindingFingerprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/FindingFingerprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FindingFingerprint(ctx, req.(*QueryFindingFingerprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProgramFingerprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProgramFingerprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProgramFingerprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/ProgramFingerprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProgramFingerprint(ctx, req.(*QueryProgramFingerprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Theorems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTheoremsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Theorems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/Theorems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Theorems(ctx, req.(*QueryTheoremsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Theorem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTheoremRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Theorem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/Theorem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Theorem(ctx, req.(*QueryTheoremRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Proof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Proof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/Proof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Proof(ctx, req.(*QueryProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/Reward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reward(ctx, req.(*QueryRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shentu.bounty.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Programs",
			Handler:    _Query_Programs_Handler,
		},
		{
			MethodName: "Program",
			Handler:    _Query_Program_Handler,
		},
		{
			MethodName: "Findings",
			Handler:    _Query_Findings_Handler,
		},
		{
			MethodName: "Finding",
			Handler:    _Query_Finding_Handler,
		},
		{
			MethodName: "FindingFingerprint",
			Handler:    _Query_FindingFingerprint_Handler,
		},
		{
			MethodName: "ProgramFingerprint",
			Handler:    _Query_ProgramFingerprint_Handler,
		},
		{
			MethodName: "Theorems",
			Handler:    _Query_Theorems_Handler,
		},
		{
			MethodName: "Theorem",
			Handler:    _Query_Theorem_Handler,
		},
		{
			MethodName: "Proof",
			Handler:    _Query_Proof_Handler,
		},
		{
			MethodName: "Reward",
			Handler:    _Query_Reward_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shentu/bounty/v1/query.proto",
}

func (m *QueryHostsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryHostsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryHostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HostAddr) > 0 {
		i -= len(m.HostAddr)
		copy(dAtA[i:], m.HostAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.HostAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHostResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryProgramsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProgramsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProgramsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProgramsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProgramsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProgramsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Programs) > 0 {
		for iNdEx := len(m.Programs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Programs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryProgramRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProgramRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProgramRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Program.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFindingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFindingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFindingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubmitterAddress) > 0 {
		i -= len(m.SubmitterAddress)
		copy(dAtA[i:], m.SubmitterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubmitterAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFindingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFindingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFindingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Findings) > 0 {
		for iNdEx := len(m.Findings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Findings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFindingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFindingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFindingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FindingId) > 0 {
		i -= len(m.FindingId)
		copy(dAtA[i:], m.FindingId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FindingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Finding.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFindingFingerprintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFindingFingerprintRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFindingFingerprintRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FindingId) > 0 {
		i -= len(m.FindingId)
		copy(dAtA[i:], m.FindingId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FindingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFindingFingerprintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFindingFingerprintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFindingFingerprintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fingerprint) > 0 {
		i -= len(m.Fingerprint)
		copy(dAtA[i:], m.Fingerprint)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Fingerprint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProgramFingerprintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProgramFingerprintRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProgramFingerprintRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProgramFingerprintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProgramFingerprintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProgramFingerprintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fingerprint) > 0 {
		i -= len(m.Fingerprint)
		copy(dAtA[i:], m.Fingerprint)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Fingerprint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTheoremsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTheoremsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTheoremsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTheoremsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTheoremsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTheoremsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Theorems) > 0 {
		for iNdEx := len(m.Theorems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Theorems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTheoremRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTheoremRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTheoremRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TheoremId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TheoremId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTheoremResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTheoremResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTheoremResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Theorem.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofId) > 0 {
		i -= len(m.ProofId)
		copy(dAtA[i:], m.ProofId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProofId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryHostsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryHostsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryHostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHostResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryProgramsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProgramsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Programs) > 0 {
		for _, e := range m.Programs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProgramRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Program.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFindingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubmitterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFindingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Findings) > 0 {
		for _, e := range m.Findings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFindingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FindingId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Finding.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFindingFingerprintRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FindingId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFindingFingerprintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fingerprint)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProgramFingerprintRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProgramFingerprintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fingerprint)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTheoremsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTheoremsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Theorems) > 0 {
		for _, e := range m.Theorems {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTheoremRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TheoremId != 0 {
		n += 1 + sovQuery(uint64(m.TheoremId))
	}
	return n
}

func (m *QueryTheoremResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Theorem.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProofId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Proof.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryHostsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHostsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHostResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProgramsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProgramsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProgramsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProgramsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProgramsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProgramsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Programs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Programs = append(m.Programs, Program{})
			if err := m.Programs[len(m.Programs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProgramRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProgramRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProgramRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Program.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFindingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFindingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFindingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmitterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFindingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFindingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFindingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Findings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Findings = append(m.Findings, Finding{})
			if err := m.Findings[len(m.Findings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFindingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFindingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFindingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Finding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFindingFingerprintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFindingFingerprintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFindingFingerprintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFindingFingerprintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFindingFingerprintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFindingFingerprintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fingerprint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fingerprint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProgramFingerprintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProgramFingerprintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProgramFingerprintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProgramFingerprintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProgramFingerprintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProgramFingerprintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fingerprint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fingerprint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTheoremsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTheoremsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTheoremsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTheoremsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTheoremsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTheoremsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Theorems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Theorems = append(m.Theorems, Theorem{})
			if err := m.Theorems[len(m.Theorems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTheoremRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTheoremRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTheoremRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheoremId", wireType)
			}
			m.TheoremId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TheoremId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTheoremResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTheoremResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTheoremResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Theorem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Theorem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.DecCoin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
