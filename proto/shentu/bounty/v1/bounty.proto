syntax = "proto3";
package shentu.bounty.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "amino/amino.proto";

option go_package = "github.com/shentufoundation/shentu/x/bounty/types";

message Program {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string program_id = 1 [(gogoproto.moretags) = "yaml:\"program_id\""];
  string name = 2 [(gogoproto.moretags) = "yaml:\"name\""];
  // JSON by ProgramDetail
  string detail = 3 [(gogoproto.moretags) = "yaml:\"detail\""];
  string admin_address = 4 [(gogoproto.moretags) = "yaml:\"admin_address\""];
  ProgramStatus status = 5 [(gogoproto.moretags) = "yaml:\"status\""];
  google.protobuf.Timestamp create_time = 6
  [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"create_time\""];
}

message Finding {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string program_id = 1 [(gogoproto.moretags) = "yaml:\"program_id\""];
  string finding_id = 2 [(gogoproto.moretags) = "yaml:\"finding_id\""];
  string title = 3;
  string description = 4 [(gogoproto.moretags) = "yaml:\"description\""];
  string proof_of_concept = 5 [(gogoproto.moretags) = "yaml:\"proof_of_concept\""];
  // hash(description + proof_of_concept + submitter)
  string finding_hash = 6 [(gogoproto.moretags) = "yaml:\"finding_hash\""];
  string submitter_address = 7 [(gogoproto.moretags) = "yaml:\"submitter_address\""];
  SeverityLevel severity_level = 8 [(gogoproto.moretags) = "yaml:\"severity_level\""];
  FindingStatus status = 9 [(gogoproto.moretags) = "yaml:\"status\""];
  // JSON by FindingDetail
  string detail = 10 [(gogoproto.moretags) = "yaml:\"detail\""];
  string payment_hash = 11 [(gogoproto.moretags) = "yaml:\"payment_hash\""];
  google.protobuf.Timestamp create_time = 12
  [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"create_time\""];
}

message ProgramFingerprint {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string program_id = 1 [(gogoproto.jsontag) = "id", (gogoproto.moretags) = "yaml:\"id\""];
  string name = 2 [(gogoproto.moretags) = "yaml:\"name\""];
  // JSON by ProgramDetail
  string detail = 3 [(gogoproto.moretags) = "yaml:\"detail\""];
  string admin_address = 4 [(gogoproto.moretags) = "yaml:\"admin_address\""];
  ProgramStatus status = 5 [(gogoproto.moretags) = "yaml:\"status\""];
}

message FindingFingerprint {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string program_id = 1 [(gogoproto.moretags) = "yaml:\"program_id\""];
  string finding_id = 2 [(gogoproto.jsontag) = "id", (gogoproto.moretags) = "yaml:\"id\""];
  string title = 3;
  // hash(description + proof_of_concept + submitter)
  string finding_hash = 4 [(gogoproto.moretags) = "yaml:\"finding_hash\""];
  SeverityLevel severity_level = 5 [(gogoproto.moretags) = "yaml:\"severity_level\""];
  FindingStatus status = 6 [(gogoproto.moretags) = "yaml:\"status\""];
  // JSON by FindingDetail
  string detail = 7 [(gogoproto.moretags) = "yaml:\"detail\""];
  string payment_hash = 8 [(gogoproto.moretags) = "yaml:\"payment_hash\""];
}

enum ProgramStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  PROGRAM_STATUS_INACTIVE = 0 [(gogoproto.enumvalue_customname) = "ProgramStatusInactive"];
  PROGRAM_STATUS_ACTIVE = 1 [(gogoproto.enumvalue_customname) = "ProgramStatusActive"];
  PROGRAM_STATUS_CLOSED = 2 [(gogoproto.enumvalue_customname) = "ProgramStatusClosed"];
}

enum SeverityLevel {
  option (gogoproto.goproto_enum_prefix) = false;

  SEVERITY_LEVEL_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "Unspecified"];
  SEVERITY_LEVEL_CRITICAL = 1 [(gogoproto.enumvalue_customname) = "Critical"];
  SEVERITY_LEVEL_HIGH = 2 [(gogoproto.enumvalue_customname) = "High"];
  SEVERITY_LEVEL_MEDIUM = 3 [(gogoproto.enumvalue_customname) = "Medium"];
  SEVERITY_LEVEL_LOW = 4 [(gogoproto.enumvalue_customname) = "Low"];
  SEVERITY_LEVEL_INFORMATIONAL = 5 [(gogoproto.enumvalue_customname) = "Informational"];
}

enum FindingStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  FINDING_STATUS_SUBMITTED = 0 [(gogoproto.enumvalue_customname) = "FindingStatusSubmitted"];
  FINDING_STATUS_ACTIVE = 1 [(gogoproto.enumvalue_customname) = "FindingStatusActive"];
  FINDING_STATUS_CONFIRMED = 2 [(gogoproto.enumvalue_customname) = "FindingStatusConfirmed"];
  FINDING_STATUS_PAID = 3 [(gogoproto.enumvalue_customname) = "FindingStatusPaid"];
  FINDING_STATUS_CLOSED = 4 [(gogoproto.enumvalue_customname) = "FindingStatusClosed"];
}

// Theorem defines the core field members of an openmath theorem.
message Theorem {
  // id defines the unique id of the theorem.
  uint64 id = 1;

  // title is the title of the theorem
  string title = 2;

  // description is the description of the theorem
  string description = 3;

  // code is a summary of the theorem
  string code = 4;

  string proof_id = 5;

  // status defines the theorem status.
  TheoremStatus status = 6;

  // submit_time is the time of theorem submission.
  google.protobuf.Timestamp submit_time = 7 [(gogoproto.stdtime) = true];

  // submit_time is the time of theorem submission.
  google.protobuf.Timestamp grant_end_time = 8 [(gogoproto.stdtime) = true];

  // voting_start_time is the starting time to submit proof of a theorem.
  google.protobuf.Timestamp proof_start_time = 9 [(gogoproto.stdtime) = true];

  google.protobuf.Timestamp proof_end_time = 10 [(gogoproto.stdtime) = true];

  // total_deposit is the total grant on the theorem.
  repeated cosmos.base.v1beta1.Coin total_grant = 11 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];

  // proposer is the address of the theorem submitter
  string proposer = 12 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message Proof {
  uint64 theorem_id = 1;

  // id defines the unique id of the proof.
  string id = 2;

  // proof_url is the proof data attached to the theorem stored in ipfs
  string proof_content = 3;

  // status defines the theorem status.
  ProofStatus status = 4;

  // submit_time is the time of proof submission.
  google.protobuf.Timestamp submit_time = 5 [(gogoproto.stdtime) = true];

  //  prover is the address of the proof submitter
  string prover = 6 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  //
  repeated cosmos.base.v1beta1.Coin Deposit = 7 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// Grant defines an amount granted by a grantor to an active theorem.
message Grant {
  // theorem_id defines the unique id of the theorem.
  uint64 theorems_id = 1;

  // grantor defines the grant addresses.
  string grantor = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // amount to be deposited by the grantor.
  repeated cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message Params {
  // Minimum grant for a theorem to enter the proof period.
  repeated cosmos.base.v1beta1.Coin min_grant = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];

  // Maximum period for Shentu holders to grant on a theorem. Initial value: 2 weeks.
  google.protobuf.Duration max_grant_period = 2 [(gogoproto.stdduration) = true];

  // Duration of the proof period.
  google.protobuf.Duration proof_period = 3 [(gogoproto.stdduration) = true];

  // Duration of the proof lock period. 10min
  google.protobuf.Duration proof_hash_lock_period = 4 [(gogoproto.stdduration) = true];
}

enum TheoremStatus {
  // default theorem status.
  THEOREM_STATUS_UNSPECIFIED = 0;
  // theorem status during the grant period.
  THEOREM_STATUS_GRANT_PERIOD = 1;
  // theorem status during the proof period.
  THEOREM_STATUS_PROOF_PERIOD = 2;
  // theorem that has passed.
  THEOREM_STATUS_PASSED = 3;
  // theorem that has closed.
  THEOREM_STATUS_CLOSED = 4;
}

enum ProofStatus {
  // default proof status.
  PROOF_STATUS_UNSPECIFIED = 0;
  // proof status during the creation period.
  PROOF_STATUS_HASH_LOCK_PERIOD = 1;
  // proof status during the upload proof period.
  PROOF_STATUS_HASH_PROOF_PERIOD = 2;
  // theorem that has passed.
  PROOF_STATUS_PASSED = 3;
  // theorem that has failed.
  PROOF_STATUS_FAILED = 4;
  // theorem that has timeout.
  PROOF_STATUS_TIMEOUT = 5;
}
