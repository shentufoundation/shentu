syntax = "proto3";
package shentu.bounty.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/base/v1beta1/coin.proto";
import "amino/amino.proto";

import "shentu/bounty/v1/bounty.proto";

option go_package = "github.com/shentufoundation/shentu/x/bounty/types";

// Msg defines the staking Msg service.
service Msg {
  // CreateProgram defines a method for creating a new program.
  rpc CreateProgram(MsgCreateProgram) returns (MsgCreateProgramResponse);

  // EditProgram defines a method for modifying a program.
  rpc EditProgram(MsgEditProgram) returns (MsgEditProgramResponse);

  // Activate a program status by program_id
  rpc ActivateProgram(MsgActivateProgram) returns (MsgActivateProgramResponse);

  // Closed a program status by program_id
  rpc CloseProgram(MsgCloseProgram) returns (MsgCloseProgramResponse);

  // SubmitFinding defines a method for submitting a new finding.
  rpc SubmitFinding(MsgSubmitFinding) returns (MsgSubmitFindingResponse);

  // EditFinding defines a method for editing a new finding.
  rpc EditFinding(MsgEditFinding) returns (MsgEditFindingResponse);

  // ActivateFinding defines a method for activate a new finding.
  rpc ActivateFinding(MsgActivateFinding) returns (MsgActivateFindingResponse);

  // ConfirmFinding defines a method for host confirm a finding.
  rpc ConfirmFinding(MsgConfirmFinding) returns (MsgConfirmFindingResponse);

  // ConfirmFindingPaid defines a method for submitter confirm a finding paid
  rpc ConfirmFindingPaid(MsgConfirmFindingPaid) returns (MsgConfirmFindingPaidResponse);

  // CloseFinding defines a method for submitter or certifier close a finding
  rpc CloseFinding(MsgCloseFinding) returns (MsgCloseFindingResponse);

  // PublishFinding defines a method for publish a finding.
  rpc PublishFinding(MsgPublishFinding) returns (MsgPublishFindingResponse);

  // CreateTheorem defines a method to create new theorem given the messages.
  rpc CreateTheorem(MsgCreateTheorem) returns (MsgCreateTheoremResponse);

  // SubmitProofHash defines a method to submit a proof with hash.
  rpc SubmitProofHash(MsgSubmitProofHash) returns (MsgSubmitProofHashResponse);

  // SubmitProofDetail defines a method to submit a proof with detail.
  rpc SubmitProofDetail(MsgSubmitProofDetail) returns (MsgSubmitProofDetailResponse);

  // SubmitProofVerification defines a method to submit a proof result.
  rpc SubmitProofVerification(MsgSubmitProofVerification) returns (MsgSubmitProofVerificationResponse);

  // Grant defines a method to grant theorem given the messages.
  rpc Grant(MsgGrant) returns (MsgGrantResponse);

  // WithdrawReward defines a method to withdraw reward given the messages.
  rpc WithdrawReward(MsgWithdrawReward) returns (MsgWithdrawRewardResponse);
}

// MsgCreateProgram defines a SDK message for creating a new program.
message MsgCreateProgram {
  option (cosmos.msg.v1.signer) = "operator_address";
  option (amino.name) = "bounty/CreateProgram";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string program_id = 1 [(gogoproto.moretags) = "yaml:\"program_id\""];
  string name = 2;
  string detail = 3;
  string operator_address = 4 [(gogoproto.moretags) = "yaml:\"operator_address\""];
}

// MsgEditProgram defines a SDK message for editing a program.
message MsgEditProgram {
  option (cosmos.msg.v1.signer) = "operator_address";
  option (amino.name) = "bounty/EditProgram";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string program_id = 1 [(gogoproto.moretags) = "yaml:\"program_id\""];
  string name = 2;
  string detail = 3;
  string operator_address = 4 [(gogoproto.moretags) = "yaml:\"operator_address\""];
}

// MsgCreateProgramResponse defines the Msg/CreateProgram response type.
message MsgCreateProgramResponse {
}

// MsgEditProgramResponse defines the Msg/EditProgram response type.
message MsgEditProgramResponse {}

message MsgActivateProgram {
  option (cosmos.msg.v1.signer) = "operator_address";
  option (amino.name) = "bounty/ActivateProgram";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string program_id = 1 [(gogoproto.moretags) = "yaml:\"program_id\""];
  string operator_address = 2 [(gogoproto.moretags) = "yaml:\"operator_address\""];
}

message MsgActivateProgramResponse {}

message MsgCloseProgram {
  option (cosmos.msg.v1.signer) = "operator_address";
  option (amino.name) = "bounty/CloseProgram";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string program_id = 1 [(gogoproto.moretags) = "yaml:\"program_id\""];
  string operator_address = 2 [(gogoproto.moretags) = "yaml:\"operator_address\""];
}

message MsgCloseProgramResponse {}

// MsgSubmitFinding defines a message to submit a finding.
message MsgSubmitFinding {
  option (cosmos.msg.v1.signer) = "operator_address";
  option (amino.name) = "bounty/SubmitFinding";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string program_id = 1 [(gogoproto.moretags) = "yaml:\"program_id\""];
  string finding_id = 2 [(gogoproto.moretags) = "yaml:\"finding_id\""];
  string finding_hash = 3 [(gogoproto.moretags) = "yaml:\"finding_hash\""];
  string operator_address = 4 [(gogoproto.moretags) = "yaml:\"operator_address\""];
  SeverityLevel severity_level = 5 [(gogoproto.moretags) = "yaml:\"severity_level\""];
}

// MsgSubmitFindingResponse defines the MsgSubmitFinding response type.
message MsgSubmitFindingResponse {}

// MsgEditFinding defines a message to edit a finding.
message MsgEditFinding {
  option (cosmos.msg.v1.signer) = "operator_address";
  option (amino.name) = "bounty/EditFinding";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string finding_id = 1 [(gogoproto.moretags) = "yaml:\"finding_id\""];
  string finding_hash = 2 [(gogoproto.moretags) = "yaml:\"finding_hash\""];
  string operator_address = 3 [(gogoproto.moretags) = "yaml:\"operator_address\""];
  SeverityLevel severity_level = 4 [(gogoproto.moretags) = "yaml:\"severity_level\""];
  string payment_hash = 5 [(gogoproto.moretags) = "yaml:\"payment_hash\""];
}

// MsgEditFindingResponse defines the MsgEditFinding response type.
message MsgEditFindingResponse {}

// MsgConfirmFinding defines a message to confirm a finding to an existing finding.
message MsgConfirmFinding {
  option (cosmos.msg.v1.signer) = "operator_address";
  option (amino.name) = "bounty/ConfirmFinding";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string finding_id = 1 [(gogoproto.moretags) = "yaml:\"finding_id\""];
  string operator_address = 2 [(gogoproto.moretags) = "yaml:\"operator_address\""];
  string fingerprint = 3;
}

// MsgConfirmFindingResponse defines the Msg/AcceptFinding response type.
message MsgConfirmFindingResponse {}

// MsgActivateFinding defines a message to activate a finding to an existing finding.
message MsgActivateFinding {
  option (cosmos.msg.v1.signer) = "operator_address";
  option (amino.name) = "bounty/ActivateFinding";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string finding_id = 1 [(gogoproto.moretags) = "yaml:\"finding_id\""];
  string operator_address = 2 [(gogoproto.moretags) = "yaml:\"operator_address\""];
}

// MsgActivateFindingResponse defines the Msg/AcceptFinding response type.
message MsgActivateFindingResponse {}

// MsgConfirmFindingPaid defines a message to confirm a finding has been paid.
message MsgConfirmFindingPaid {
  option (cosmos.msg.v1.signer) = "operator_address";
  option (amino.name) = "bounty/ConfirmFindingPaid";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string finding_id = 1 [(gogoproto.moretags) = "yaml:\"finding_id\""];
  string operator_address = 2 [(gogoproto.moretags) = "yaml:\"operator_address\""];
}

// MsgConfirmFindingPaidResponse defines the Msg/ConfirmFindingPaid response type.
message MsgConfirmFindingPaidResponse {}

// MsgCloseFinding defines a message to close a finding.
message MsgCloseFinding {
  option (cosmos.msg.v1.signer) = "operator_address";
  option (amino.name) = "bounty/CloseFinding";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string finding_id = 1 [(gogoproto.moretags) = "yaml:\"finding_id\""];
  string operator_address = 2 [(gogoproto.moretags) = "yaml:\"operator_address\""];
}

// MsgCloseFindingResponse defines the Msg/CloseFinding response type.
message MsgCloseFindingResponse {}

// MsgPublishFinding defines a message to publish a finding.
message MsgPublishFinding {
  option (cosmos.msg.v1.signer) = "operator_address";
  option (amino.name) = "bounty/PublishFinding";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string finding_id = 1 [(gogoproto.moretags) = "yaml:\"finding_id\""];
  string title = 2;
  string detail = 3;
  string description = 4 [(gogoproto.moretags) = "yaml:\"description\""];
  string proof_of_concept = 5 [(gogoproto.moretags) = "yaml:\"proof_of_concept\""];
  string operator_address = 6 [(gogoproto.moretags) = "yaml:\"operator_address\""];
}

// MsgPublishFindingResponse defines the MsgPublishFinding response type.
message MsgPublishFindingResponse {}

// MsgCreateTheorem defines a message to create a new theorem.
message MsgCreateTheorem {
  option (cosmos.msg.v1.signer) = "proposer";
  option (amino.name) = "bounty/MsgCreateTheorem";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string title = 1;
  string description = 2;
  string code = 3;
  repeated cosmos.base.v1beta1.Coin initial_grant = 4 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
  string proposer = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgCreateTheoremResponse defines the Msg/CreateTheorem response type.
message MsgCreateTheoremResponse {
  uint64 theorem_id = 1;
}

// MsgGrant defines a message to grant funds to a theorem.
message MsgGrant {
  option (cosmos.msg.v1.signer) = "grantor";
  option (amino.name) = "bounty/MsgGrant";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // theorem_id defines the unique id of the theorem.
  uint64 theorem_id = 1 [(gogoproto.jsontag) = "theorem_id", (amino.dont_omitempty) = true];
  string grantor = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgGrantResponse defines the Msg/Grant response type.
message MsgGrantResponse {}

// MsgSubmitProofHash defines a message to submit a proof hash.
message MsgSubmitProofHash {
  option (cosmos.msg.v1.signer) = "prover";
  option (amino.name) = "bounty/MsgSubmitProofHash";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  uint64 theorem_id = 1 [(gogoproto.jsontag) = "theorem_id", (amino.dont_omitempty) = true];
  string prover = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string proof_hash = 3;
  repeated cosmos.base.v1beta1.Coin deposit = 4 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgSubmitProofHashResponse defines the Msg/SubmitProofHash response type.
message MsgSubmitProofHashResponse {}

// MsgSubmitProofDetail defines a message to submit proof details.
message MsgSubmitProofDetail {
  option (cosmos.msg.v1.signer) = "prover";
  option (amino.name) = "bounty/MsgSubmitProofDetail";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string proof_id = 1 [(gogoproto.jsontag) = "proof_id", (amino.dont_omitempty) = true];
  string prover = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string detail = 3;
}

// MsgSubmitProofDetailResponse defines the Msg/SubmitProofDetail response type.
message MsgSubmitProofDetailResponse {}

// MsgSubmitProofVerification defines a message to submit proof verification.
message MsgSubmitProofVerification {
  option (cosmos.msg.v1.signer) = "checker";
  option (amino.name) = "bounty/MsgSubmitProofVerification";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string proof_id = 1;
  ProofStatus status = 2;
  string checker = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgSubmitProofVerificationResponse defines the Msg/SubmitProofVerification response type.
message MsgSubmitProofVerificationResponse {}

// MsgWithdrawReward defines a message to withdraw rewards.
message MsgWithdrawReward {
  option (cosmos.msg.v1.signer) = "address";
  option (amino.name) = "bounty/MsgWithdrawReward";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgWithdrawRewardResponse {}
